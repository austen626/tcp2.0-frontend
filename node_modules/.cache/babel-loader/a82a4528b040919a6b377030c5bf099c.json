{"ast":null,"code":"var _jsxFileName = \"/home/freedom/Music/tcp2.0-frontend/src/screens/Sales/Home.js\";\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport Header, { HeaderLeft, HeaderCenter, HeaderRight } from '../../components/Dealer/Header';\nimport { TCPLogo, IconArrowLeft } from '../../assets/images';\nimport Input from '../../components/commons/input';\nimport Dropdown from '../../components/commons/dropdown';\nimport Loader from 'shared/Loader';\nimport { getFromData } from '../../components/commons/utility';\nimport { updateDealer, addDealer } from '../../redux/actions/admin';\n\nfunction AddDealer(props) {\n  const {\n    history,\n    dealer,\n    addDealer,\n    updateDealer,\n    actionLoading,\n    dropdownList = []\n  } = props;\n  const [validationResult, setValidationResult] = useState(null);\n\n  const handleArrowBack = () => {\n    history.push('/admin/dealers');\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const formData = getFromData(evt);\n    console.log(formData);\n    setValidationResult(formData.validationResult);\n\n    if (!formData.validationResult) {\n      let data = formData.formData;\n\n      if (dealer.id) {\n        data = { ...data,\n          updated_email: data.email,\n          updated_phone: data.phone\n        };\n        updateDealer(history, data);\n      } else {\n        addDealer(history, data);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dealer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, actionLoading && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 32\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(HeaderLeft, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: IconArrowLeft,\n    onClick: () => handleArrowBack(),\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(HeaderCenter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"main-logo\",\n    src: TCPLogo,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(HeaderRight, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    noValidate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, dealer.id && /*#__PURE__*/React.createElement(Input, {\n    name: \"id\",\n    type: \"hidden\",\n    value: dealer.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"styled-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: dealer.id ? \"company_name\" : \"dealer_company_name\",\n    type: \"text\",\n    defaultValue: dealer.company_name,\n    label: \"Dealer Name\",\n    defaultText: \"Dealer Name\",\n    required: true,\n    error: {\n      'empty': \"Please enter Dealer Name\"\n    },\n    validationResult: validationResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: dealer.id ? \"email\" : \"dealer_email\",\n    type: \"email\",\n    regex: \"^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$\",\n    defaultValue: dealer.email,\n    label: \"Main Dealer User Email\",\n    defaultText: \"Main Dealer User Email\",\n    required: true,\n    error: {\n      'invalid': \"Please enter valid Email address\",\n      'empty': \"Please enter Main Dealer User Email\"\n    },\n    validationResult: validationResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: dealer.id ? \"contact_email\" : \"dealer_contact_email\",\n    type: \"email\",\n    regex: \"^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$\",\n    defaultValue: dealer.contact_email,\n    label: \"Dealer Contact Email\",\n    defaultText: \"Dealer Contact Email\",\n    required: true,\n    error: {\n      'invalid': \"Please enter valid Email address\",\n      'empty': \"Please enter Dealer Contact Email\"\n    },\n    validationResult: validationResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: dealer.id ? \"phone\" : \"dealer_phone\",\n    type: \"text\",\n    defaultValue: dealer.phone,\n    label: \"Phone\",\n    defaultText: \"999-999-9999\",\n    regex: \"[0-9]{10}\",\n    required: true,\n    error: {\n      'invalid': \"Please enter 10 digit number\",\n      'empty': \"Please enter Phone number\"\n    },\n    validationResult: validationResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"divider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }, \"ADDRESS\"), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: dealer.id ? \"street\" : \"dealer_address_street\",\n    type: \"text\",\n    defaultValue: dealer.street,\n    label: \"Street\",\n    defaultText: \"Street\",\n    required: true,\n    error: {\n      'empty': \"Please enter Street\"\n    },\n    validationResult: validationResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: dealer.id ? \"city\" : \"dealer_address_city\",\n    type: \"text\",\n    defaultValue: dealer.city,\n    label: \"City\",\n    defaultText: \"City\",\n    required: true,\n    error: {\n      'empty': \"Please enter city\"\n    },\n    validationResult: validationResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    name: dealer.state ? \"state\" : \"dealer_address_state\",\n    type: \"dropdown\",\n    defaultValue: dealer.state ? dealer.state : '',\n    label: \"State\",\n    defaultText: \"State\",\n    required: true,\n    options: dropdownList,\n    error: {\n      'empty': \"Please enter state\"\n    },\n    validationResult: validationResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"mb-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: dealer.id ? \"zip\" : \"dealer_address_zipcode\",\n    type: \"number\",\n    defaultValue: dealer.zip,\n    regex: \"[0-9]{6}\",\n    label: \"Zip Code\",\n    defaultText: \"Zip Code\",\n    maxLength: 6,\n    required: true,\n    error: {\n      'invalid': \"Please enter 6 digit number\",\n      'empty': \"Please enter zip code\"\n    },\n    validationResult: validationResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"secondary\",\n    onClick: () => handleArrowBack(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"secondary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 21\n    }\n  }, dealer.id ? 'Update' : 'Add'))));\n}\n\nconst mapStateToProps = state => ({\n  dealer: state.admin.selectedDealer,\n  actionLoading: state.admin.actionLoading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addDealer: (history, data) => dispatch(addDealer(history, data)),\n  updateDealer: (history, data) => dispatch(updateDealer(history, data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddDealer);","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/screens/Sales/Home.js"],"names":["React","useState","connect","Form","Header","HeaderLeft","HeaderCenter","HeaderRight","TCPLogo","IconArrowLeft","Input","Dropdown","Loader","getFromData","updateDealer","addDealer","AddDealer","props","history","dealer","actionLoading","dropdownList","validationResult","setValidationResult","handleArrowBack","push","handleSubmit","evt","preventDefault","formData","console","log","data","id","updated_email","email","updated_phone","phone","e","company_name","contact_email","street","city","state","zip","mapStateToProps","admin","selectedDealer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Form } from 'react-bootstrap';\nimport Header, { HeaderLeft, HeaderCenter, HeaderRight } from '../../components/Dealer/Header';\nimport { TCPLogo, IconArrowLeft } from '../../assets/images';\nimport Input from '../../components/commons/input';\nimport Dropdown from '../../components/commons/dropdown';\nimport Loader from 'shared/Loader';\n\nimport { getFromData } from '../../components/commons/utility';\nimport { updateDealer, addDealer } from '../../redux/actions/admin';\n\nfunction AddDealer(props) {\n\n    const {\n        history,\n        dealer,\n        addDealer,\n        updateDealer,\n        actionLoading,\n        dropdownList = []\n    } = props;\n\n    const [validationResult, setValidationResult] = useState(null);\n\n    const handleArrowBack = () => {\n        history.push('/admin/dealers')\n    }\n\n    const handleSubmit = evt => {\n\n        evt.preventDefault();\n        const formData = getFromData(evt);\n\n        console.log(formData)\n\n        setValidationResult(formData.validationResult);\n\n        if (!formData.validationResult) {\n\n            let data = formData.formData\n\n            if (dealer.id) {\n\n                data = { ...data, updated_email: data.email, updated_phone: data.phone }\n                updateDealer(history, data)\n            }\n            else {\n                addDealer(history, data)\n            }\n        }\n    }\n\n    return (\n        <div className=\"dealer\">\n\n            { actionLoading && <Loader />}\n\n            <Header>\n                <HeaderLeft>\n                    <img src={IconArrowLeft} onClick={() => handleArrowBack()} alt=\"\" />\n                </HeaderLeft>\n                <HeaderCenter>\n                    <div className=\"header-main\">\n                        <img className=\"main-logo\" src={TCPLogo} alt=\"\" />\n                    </div>\n                </HeaderCenter>\n                <HeaderRight></HeaderRight>\n            </Header>\n\n            <form onSubmit={(e) => handleSubmit(e)} noValidate>\n                {dealer.id &&\n                    <Input\n                        name=\"id\"\n                        type=\"hidden\"\n                        value={dealer.id}\n                    />\n                }\n                <div className=\"container\">\n                    <div className=\"styled-form\">\n                        <Form.Group className=\"mb-18\">\n                            <Input\n                                name={dealer.id ? \"company_name\" : \"dealer_company_name\"}\n                                type=\"text\"\n                                defaultValue={dealer.company_name}\n                                label=\"Dealer Name\"\n                                defaultText=\"Dealer Name\"\n                                required={true}\n                                error={{\n                                    'empty': \"Please enter Dealer Name\"\n                                }}\n                                validationResult={validationResult}\n                            />\n                        </Form.Group>\n                        <div className=\"box\">\n                            <Form.Group className=\"mb-18\">\n                                <Input\n                                    name={dealer.id ? \"email\" : \"dealer_email\"}\n                                    type=\"email\"\n                                    regex=\"^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$\"\n                                    defaultValue={dealer.email}\n                                    label=\"Main Dealer User Email\"\n                                    defaultText=\"Main Dealer User Email\"\n                                    required={true}\n                                    error={{\n                                        'invalid': \"Please enter valid Email address\",\n                                        'empty': \"Please enter Main Dealer User Email\"\n                                    }}\n                                    validationResult={validationResult}\n                                />\n                            </Form.Group>\n                            <Form.Group className=\"mb-18\">\n                                <Input\n                                    name={dealer.id ? \"contact_email\" : \"dealer_contact_email\"}\n                                    type=\"email\"\n                                    regex=\"^[a-zA-Z0-9+_.-]+@[a-zA-Z0-9.-]+$\"\n                                    defaultValue={dealer.contact_email}\n                                    label=\"Dealer Contact Email\"\n                                    defaultText=\"Dealer Contact Email\"\n                                    required={true}\n                                    error={{\n                                        'invalid': \"Please enter valid Email address\",\n                                        'empty': \"Please enter Dealer Contact Email\"\n                                    }}\n                                    validationResult={validationResult}\n                                />\n                            </Form.Group>\n                        </div>\n                        <Form.Group className=\"mb-18\">\n                            <Input\n                                name={dealer.id ? \"phone\" : \"dealer_phone\"}\n                                type=\"text\"\n                                defaultValue={dealer.phone}\n                                label=\"Phone\"\n                                defaultText=\"999-999-9999\"\n                                regex=\"[0-9]{10}\"\n                                required={true}\n                                error={{\n                                    'invalid': \"Please enter 10 digit number\",\n                                    'empty': \"Please enter Phone number\"\n                                }}\n                                validationResult={validationResult}\n                            />\n                        </Form.Group>\n                        <span className=\"divider\"></span>\n                        <span className=\"title\">ADDRESS</span>\n                        <Form.Group className=\"mb-18\">\n                            <Input\n                                name={dealer.id ? \"street\" : \"dealer_address_street\"}\n                                type=\"text\"\n                                defaultValue={dealer.street}\n                                label=\"Street\"\n                                defaultText=\"Street\"\n                                required={true}\n                                error={{\n                                    'empty': \"Please enter Street\"\n                                }}\n                                validationResult={validationResult}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-18\">\n                            <Input\n                                name={dealer.id ? \"city\" : \"dealer_address_city\"}\n                                type=\"text\"\n                                defaultValue={dealer.city}\n                                label=\"City\"\n                                defaultText=\"City\"\n                                required={true}\n                                error={{\n                                    'empty': \"Please enter city\"\n                                }}\n                                validationResult={validationResult}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-18\">\n                            <Dropdown\n                                name={dealer.state ? \"state\" : \"dealer_address_state\"}\n                                type=\"dropdown\"\n                                defaultValue={dealer.state ? dealer.state : ''}\n                                label=\"State\"\n                                defaultText=\"State\"\n                                required={true}\n                                options={dropdownList}\n                                error={{\n                                    'empty': \"Please enter state\"\n                                }}\n                                validationResult={validationResult}\n                            />\n                        </Form.Group>\n                        <Form.Group className=\"mb-18\">\n                            <Input\n                                name={dealer.id ? \"zip\" : \"dealer_address_zipcode\"}\n                                type=\"number\"\n                                defaultValue={dealer.zip}\n                                regex=\"[0-9]{6}\"\n                                label=\"Zip Code\"\n                                defaultText=\"Zip Code\"\n                                maxLength={6}\n                                required={true}\n                                error={{\n                                    'invalid': \"Please enter 6 digit number\",\n                                    'empty': \"Please enter zip code\"\n                                }}\n                                validationResult={validationResult}\n                            />\n                        </Form.Group>\n                    </div>\n                </div>\n                <div className=\"footer-container\">\n                    <button className=\"secondary\" onClick={() => handleArrowBack()}>Cancel</button>\n                    <button className=\"secondary\" type=\"submit\">{dealer.id ? 'Update' : 'Add'}</button>\n                </div>\n            </form>\n\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({\n    dealer: state.admin.selectedDealer,\n    actionLoading: state.admin.actionLoading\n});\n\nconst mapDispatchToProps = dispatch => ({\n    addDealer: (history, data) => dispatch(addDealer(history, data)),\n    updateDealer: (history, data) => dispatch(updateDealer(history, data))\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddDealer);"]},"metadata":{},"sourceType":"module"}