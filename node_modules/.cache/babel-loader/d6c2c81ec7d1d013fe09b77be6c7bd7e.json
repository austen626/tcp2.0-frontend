{"ast":null,"code":"import API from '../../api';\nimport { pushNotification } from 'utils/notification';\nimport { message } from 'shared/constant';\nexport const SALES_LIST = \"SALES_LIST\";\nexport const SALES_LIST_SUCCESS = \"SALES_LIST_SUCCESS\";\nexport const SALES_LIST_ERROR = \"SALES_LIST_ERROR\";\nexport const GET_APP_DETAIL = \"GET_APP_DETAIL\";\nexport const GET_APP_DETAIL_SUCCESS = \"GET_APP_DETAIL_SUCCESS\";\nexport const GET_APP_DETAIL_ERROR = \"GET_APP_DETAIL_ERROR\";\nexport const RESEND_APPLICATIONMAIL = \"RESEND_APPLICATIONMAIL\";\nexport const CANCEL_TYPE_COUNT_REQUEST = \"CANCEL_TYPE_COUNT_REQUEST\";\nexport const CANCEL_TYPE_COUNT_SUCCESS = \"CANCEL_TYPE_COUNT_SUCCESS\";\nexport const CANCEL_TYPE_COUNT_ERROR = \"CANCEL_TYPE_COUNT_ERROR\";\nexport const PENDING_TYPE_COUNT_REQUEST = \"PENDING_TYPE_COUNT_REQUEST\";\nexport const PENDING_TYPE_COUNT_SUCCESS = \"PENDING_TYPE_COUNT_SUCCESS\";\nexport const PENDING_TYPE_COUNT_ERROR = \"PENDING_TYPE_COUNT_ERROR\";\nexport const GET_SALES_BY_STATUS_REQUEST = \"GET_SALES_BY_STATUS_REQUEST\";\nexport const GET_SALES_BY_STATUS_SUCCESS = \"GET_SALES_BY_STATUS_SUCCESS\";\nexport const GET_SALES_BY_STATUS_ERROR = \"GET_SALES_BY_STATUS_ERROR\";\nexport const DELETE_SPECIFIC_REQUEST = \"DELETE_SPECIFIC_REQUEST\";\nexport const DELETE_SPECIFIC_SUCCESS = \"DELETE_SPECIFIC_SUCCESS\";\nexport const DELETE_SPECIFIC_ERROR = \"DELETE_SPECIFIC_ERROR\";\nexport const SET_INCOMPLETE_REMINDER_REQUEST = \"SET_INCOMPLETE_REMINDER_REQUEST\";\nexport const SET_INCOMPLETE_REMINDER_SUCCESS = \"SET_INCOMPLETE_REMINDER_SUCCESS\";\nexport const SET_INCOMPLETE_REMINDER_ERROR = \"SET_INCOMPLETE_REMINDER_ERROR\";\nexport function getSalesList(type, email) {\n  return async function (dispatch) {\n    try {\n      dispatch({\n        type: SALES_LIST\n      });\n      let response;\n\n      if (type) {\n        const body = {\n          status: type\n        };\n\n        if (type === 'all') {\n          const data = {\n            email: email\n          };\n          response = await API.post('/sales/apps-nohello', data);\n        } else {\n          response = await API.post('/sales/apps-list', body);\n        }\n      } else {\n        response = await API.get('/sales/apps');\n      }\n\n      dispatch({\n        type: SALES_LIST_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: SALES_LIST_ERROR\n      });\n    }\n  };\n}\nexport function getAppDetailById(appId, setDate, setEmailId) {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_APP_DETAIL\n    });\n\n    try {\n      const response = await API.get(`/sales/app/${appId}`);\n      dispatch({\n        type: GET_APP_DETAIL_SUCCESS,\n        payload: response.data\n      });\n      setDate && response.data.funding && response.data.funding[0] && response.data.funding[0].delivery_date && setDate(response.data.funding[0].delivery_date);\n\n      if (setEmailId) {\n        const dataSet = response.data;\n        setEmailId && setEmailId(dataSet);\n      }\n    } catch (error) {\n      dispatch({\n        type: GET_APP_DETAIL_ERROR\n      });\n    }\n  };\n}\nexport function resendApplicationMail(app_id, applicant_email, co_applicant_email, order_type, products, cif_number) {\n  return async function (dispatch) {\n    await API.put(`/sales/resendemail`, {\n      app_id,\n      applicant_email,\n      co_applicant_email,\n      order_type,\n      products,\n      cif_number\n    });\n  };\n}\nexport function getCancelTypeCount() {\n  return async function (dispatch) {\n    try {\n      dispatch({\n        type: CANCEL_TYPE_COUNT_REQUEST\n      });\n      const response = await API.get('/sales/counts-app');\n      const responseData = response.data.counts;\n      dispatch({\n        type: CANCEL_TYPE_COUNT_SUCCESS,\n        payload: {\n          declineCount: responseData.declined,\n          approvedCount: responseData.approved,\n          fundedCount: responseData.funded,\n          cancelCount: responseData.cancelled\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: CANCEL_TYPE_COUNT_ERROR\n      });\n    }\n  };\n}\nexport function getPendingTypeCount() {\n  return async function (dispatch) {\n    try {\n      dispatch({\n        type: PENDING_TYPE_COUNT_REQUEST\n      });\n      const response = await API.get('/sales/counts-incomplete');\n      const responseData = response.data.counts;\n      dispatch({\n        type: PENDING_TYPE_COUNT_SUCCESS,\n        payload: {\n          pendingCount: responseData.pending,\n          incompleteCount: responseData.incomplete\n        }\n      });\n    } catch (error) {\n      dispatch({\n        type: PENDING_TYPE_COUNT_ERROR\n      });\n    }\n  };\n}\nexport function changeApplicationStatus(action) {\n  return async function (dispatch) {\n    dispatch({\n      type: DELETE_SPECIFIC_REQUEST\n    });\n\n    try {\n      let data = {\n        id: action.id\n      };\n      let apiResponse = '';\n\n      if (action.type && action.type === 'pre-approval') {\n        apiResponse = await API.put(`/sales/preapproval-delete`, data);\n      } else {\n        data[\"status\"] = action.status;\n\n        if (action.page) {\n          data['page'] = action.page;\n        }\n\n        apiResponse = await API.put(`/sales/appstatuschange`, data);\n      }\n\n      if (apiResponse) {\n        dispatch({\n          type: DELETE_SPECIFIC_SUCCESS\n        });\n      }\n\n      action.getSalesList && action.getSalesList(action.pageStatus, action.email);\n      action.getPreApprovalCustomers && action.getPreApprovalCustomers();\n      pushNotification(message.DELETE_SUCCESSFULLY, 'success', 'TOP_RIGHT', 3000);\n    } catch (error) {\n      error.response && pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: DELETE_SPECIFIC_ERROR\n      });\n    }\n  };\n}\nexport function reminderIncompleteRequest(action) {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_INCOMPLETE_REMINDER_REQUEST\n    });\n\n    try {\n      const data = {\n        email: action.email\n      };\n      await API.post(`/sales/hellosign-reminder/${action.id}`, data);\n      dispatch({\n        type: SET_INCOMPLETE_REMINDER_SUCCESS\n      });\n      pushNotification(`Reminder has been sent to ${action.email}.`, 'success', 'TOP_RIGHT', 3000);\n    } catch (error) {\n      error.response && pushNotification(error.response.data.detail, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: SET_INCOMPLETE_REMINDER_ERROR\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/home/freedom/Music/tcp-frontend/src/redux/actions/sales.js"],"names":["API","pushNotification","message","SALES_LIST","SALES_LIST_SUCCESS","SALES_LIST_ERROR","GET_APP_DETAIL","GET_APP_DETAIL_SUCCESS","GET_APP_DETAIL_ERROR","RESEND_APPLICATIONMAIL","CANCEL_TYPE_COUNT_REQUEST","CANCEL_TYPE_COUNT_SUCCESS","CANCEL_TYPE_COUNT_ERROR","PENDING_TYPE_COUNT_REQUEST","PENDING_TYPE_COUNT_SUCCESS","PENDING_TYPE_COUNT_ERROR","GET_SALES_BY_STATUS_REQUEST","GET_SALES_BY_STATUS_SUCCESS","GET_SALES_BY_STATUS_ERROR","DELETE_SPECIFIC_REQUEST","DELETE_SPECIFIC_SUCCESS","DELETE_SPECIFIC_ERROR","SET_INCOMPLETE_REMINDER_REQUEST","SET_INCOMPLETE_REMINDER_SUCCESS","SET_INCOMPLETE_REMINDER_ERROR","getSalesList","type","email","dispatch","response","body","status","data","post","get","payload","error","getAppDetailById","appId","setDate","setEmailId","funding","delivery_date","dataSet","resendApplicationMail","app_id","applicant_email","co_applicant_email","order_type","products","cif_number","put","getCancelTypeCount","responseData","counts","declineCount","declined","approvedCount","approved","fundedCount","funded","cancelCount","cancelled","getPendingTypeCount","pendingCount","pending","incompleteCount","incomplete","changeApplicationStatus","action","id","apiResponse","page","pageStatus","getPreApprovalCustomers","DELETE_SUCCESSFULLY","reminderIncompleteRequest","detail"],"mappings":"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","sourcesContent":["import API from '../../api';\nimport { pushNotification } from 'utils/notification';\nimport { message } from 'shared/constant'\nexport const SALES_LIST = \"SALES_LIST\";\nexport const SALES_LIST_SUCCESS = \"SALES_LIST_SUCCESS\";\nexport const SALES_LIST_ERROR = \"SALES_LIST_ERROR\";\nexport const GET_APP_DETAIL = \"GET_APP_DETAIL\";\nexport const GET_APP_DETAIL_SUCCESS = \"GET_APP_DETAIL_SUCCESS\";\nexport const GET_APP_DETAIL_ERROR = \"GET_APP_DETAIL_ERROR\";\nexport const RESEND_APPLICATIONMAIL = \"RESEND_APPLICATIONMAIL\";\n\n\nexport const CANCEL_TYPE_COUNT_REQUEST = \"CANCEL_TYPE_COUNT_REQUEST\";\nexport const CANCEL_TYPE_COUNT_SUCCESS = \"CANCEL_TYPE_COUNT_SUCCESS\";\nexport const CANCEL_TYPE_COUNT_ERROR = \"CANCEL_TYPE_COUNT_ERROR\";\n\nexport const PENDING_TYPE_COUNT_REQUEST = \"PENDING_TYPE_COUNT_REQUEST\";\nexport const PENDING_TYPE_COUNT_SUCCESS = \"PENDING_TYPE_COUNT_SUCCESS\";\nexport const PENDING_TYPE_COUNT_ERROR = \"PENDING_TYPE_COUNT_ERROR\";\n\nexport const GET_SALES_BY_STATUS_REQUEST = \"GET_SALES_BY_STATUS_REQUEST\";\nexport const GET_SALES_BY_STATUS_SUCCESS = \"GET_SALES_BY_STATUS_SUCCESS\";\nexport const GET_SALES_BY_STATUS_ERROR = \"GET_SALES_BY_STATUS_ERROR\";\n\nexport const DELETE_SPECIFIC_REQUEST = \"DELETE_SPECIFIC_REQUEST\";\nexport const DELETE_SPECIFIC_SUCCESS = \"DELETE_SPECIFIC_SUCCESS\";\nexport const DELETE_SPECIFIC_ERROR = \"DELETE_SPECIFIC_ERROR\";\n\n\nexport const SET_INCOMPLETE_REMINDER_REQUEST = \"SET_INCOMPLETE_REMINDER_REQUEST\";\nexport const SET_INCOMPLETE_REMINDER_SUCCESS = \"SET_INCOMPLETE_REMINDER_SUCCESS\";\nexport const SET_INCOMPLETE_REMINDER_ERROR = \"SET_INCOMPLETE_REMINDER_ERROR\";\n\nexport function getSalesList(type, email) {\n    return async function(dispatch) {\n        try {\n            dispatch({\n                type: SALES_LIST\n            });\n            let response;\n            if(type) {\n                const body = {\n                    status: type\n                }\n                if(type === 'all') {\n                    const data = {\n                        email: email\n                    };\n                    response = await API.post('/sales/apps-nohello', data);\n                } else {\n                    response = await API.post('/sales/apps-list', body);\n                }\n               \n                \n            } else {\n                response = await API.get('/sales/apps');\n            }\n            dispatch({\n                type: SALES_LIST_SUCCESS,\n                payload: response.data\n            });\n        } catch(error) {\n            dispatch({\n                type: SALES_LIST_ERROR\n            });\n        }\n    }\n}\n\nexport function getAppDetailById(appId, setDate, setEmailId) {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_APP_DETAIL\n        });\n        try {\n            const response = await API.get(`/sales/app/${appId}`)\n            dispatch({\n                type: GET_APP_DETAIL_SUCCESS,\n                payload: response.data\n            });\n            setDate && response.data.funding && \n            response.data.funding[0] &&\n            response.data.funding[0].delivery_date && setDate(response.data.funding[0].delivery_date);\n            if(setEmailId) {\n                const dataSet = response.data;\n                setEmailId && setEmailId(dataSet)               \n            }\n        } catch (error) {\n            dispatch({\n                type: GET_APP_DETAIL_ERROR\n            });\n        }\n    }\n}\n\nexport function resendApplicationMail(app_id, applicant_email, co_applicant_email, order_type, products, cif_number ) {\n    return async function(dispatch) {\n        await API.put(`/sales/resendemail`, { app_id, applicant_email, co_applicant_email, order_type, products, cif_number });\n    }\n}\n\nexport function getCancelTypeCount() {\n    return async function(dispatch) {\n        try {\n            dispatch({\n                type: CANCEL_TYPE_COUNT_REQUEST\n            });\n            const response = await API.get('/sales/counts-app');\n            const responseData = response.data.counts;\n            dispatch({\n                type: CANCEL_TYPE_COUNT_SUCCESS,\n                payload: {\n                    declineCount: responseData.declined,\n                    approvedCount: responseData.approved,\n                    fundedCount: responseData.funded,\n                    cancelCount: responseData.cancelled,\n                }\n            });\n        } catch(error) {\n            dispatch({\n                type: CANCEL_TYPE_COUNT_ERROR\n            });\n        }\n    }\n}\n\nexport function getPendingTypeCount() {\n    return async function(dispatch) {\n        try {\n            dispatch({\n                type: PENDING_TYPE_COUNT_REQUEST\n            });\n            const response = await API.get('/sales/counts-incomplete');\n            const responseData = response.data.counts;\n            dispatch({\n                type: PENDING_TYPE_COUNT_SUCCESS,\n                payload: {\n                    pendingCount: responseData.pending,\n                    incompleteCount: responseData.incomplete,\n                }\n            });\n        } catch(error) {\n            dispatch({\n                type: PENDING_TYPE_COUNT_ERROR\n            });\n        }\n    }\n}\n\nexport function changeApplicationStatus(action) {\n    return async function(dispatch) {\n        dispatch({\n            type: DELETE_SPECIFIC_REQUEST,\n        })\n        try {\n            let data = {\n                id: action.id,\n            }\n            let apiResponse = ''\n            if(action.type && action.type === 'pre-approval') {\n                apiResponse = await API.put(`/sales/preapproval-delete`, data);\n            } else {\n                data[\"status\"] = action.status;\n                if(action.page) {\n                    data['page'] = action.page;\n                }\n                apiResponse = await API.put(`/sales/appstatuschange`, data);\n            }\n            \n            if(apiResponse) {\n                dispatch({\n                    type: DELETE_SPECIFIC_SUCCESS,\n                })\n            }\n            action.getSalesList && action.getSalesList(action.pageStatus, action.email);\n            action.getPreApprovalCustomers && action.getPreApprovalCustomers()\n            pushNotification(message.DELETE_SUCCESSFULLY, 'success', 'TOP_RIGHT', 3000);\n        } catch (error) {\n            error.response && pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: DELETE_SPECIFIC_ERROR,\n            })\n        }\n       \n    }\n}\n\nexport function reminderIncompleteRequest(action) {\n    return async function(dispatch) {\n        dispatch({\n            type: SET_INCOMPLETE_REMINDER_REQUEST,\n        })\n        try {\n            const data = {\n                email: action.email,\n            }\n            await API.post(`/sales/hellosign-reminder/${action.id}`, data);\n            dispatch({\n                type: SET_INCOMPLETE_REMINDER_SUCCESS,\n            })\n            pushNotification(`Reminder has been sent to ${action.email}.`, 'success', 'TOP_RIGHT', 3000);\n        } catch (error) {\n            error.response && pushNotification(error.response.data.detail, 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: SET_INCOMPLETE_REMINDER_ERROR,\n            })\n        }\n       \n    }\n}\n"]},"metadata":{},"sourceType":"module"}