{"ast":null,"code":"import API from '../../api';\nexport const GET_PREAPPROVALS = \"GET_PREAPPROVALS\";\nexport const GET_PREAPPROVALS_SUCCESS = \"GET_PREAPPROVALS_SUCCESS\";\nexport const GET_PREAPPROVALS_FAILED = \"GET_PREAPPROVALS_FAILED\";\nexport const SET_SELECTED_PREAPPROVAL = \"SET_SELECTED_PREAPPROVAL\";\nexport const CHANGE_SELECTED_PREAPPROVAL_STATUS = \"CHANGE_SELECTED_PREAPPROVAL_STATUS\";\nexport const SET_SELECTED_PENDING_APPLICATION = \"SET_SELECTED_PENDING_APPLICATION\";\nexport const CHANGE_SELECTED_PENDING_APPLICATION_STATUS = \"CHANGE_SELECTED_PENDING_APPLICATION_STATUS\";\nexport const GET_FUNDING_REQUESTS = \"GET_FUNDING_REQUESTS\";\nexport const GET_FUNDING_REQUESTS_SUCCESS = \"GET_FUNDING_REQUESTS_SUCCESS\";\nexport const GET_FUNDING_REQUESTS_FAILED = \"GET_FUNDING_REQUESTS_FAILED\";\nexport const SET_SELECTED_FUNDING_REQUEST = \"SET_SELECTED_FUNDING_REQUEST\";\nexport const CHANGE_SELECTED_FUNDING_REQUEST_STATUS = \"CHANGE_SELECTED_FUNDING_REQUEST_STATUS\";\nexport function getPreapprovals() {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_PREAPPROVALS\n    });\n\n    try {\n      const response = await API.get(`/sales/preapprovals`);\n      dispatch({\n        type: GET_PREAPPROVALS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PREAPPROVALS_FAILED\n      });\n    }\n  };\n}\nexport function setSelectedPreApproval(item) {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_SELECTED_PREAPPROVAL,\n      payload: item\n    });\n  };\n}\nexport function changeSelectedPreApprovalStatus(id, status) {\n  return async function (dispatch) {\n    const response = await API.put(`/sales/preapproval/${id}`, {\n      status\n    });\n    dispatch({\n      type: CHANGE_SELECTED_PREAPPROVAL_STATUS,\n      payload: status\n    });\n  };\n}\nexport function setSelectedPendingApplication(item) {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_SELECTED_PENDING_APPLICATION,\n      payload: item\n    });\n  };\n}\nexport function changeSelectedPendingApplicationStatus(id, status) {\n  return async function (dispatch) {\n    // const response = await API.put(`/sales/preapproval/${id}`, { status });\n    dispatch({\n      type: CHANGE_SELECTED_PREAPPROVAL_STATUS,\n      payload: status\n    });\n  };\n}\nexport function requestFunding(appId, deliveryDate) {\n  return async function (dispatch) {\n    const response = await API.post(`/sales/fundingrequests`, {\n      app_id: appId,\n      delivery_date: deliveryDate\n    });\n    return true;\n  };\n}\nexport function requestCancel(appId) {\n  return async function (dispatch) {\n    const response = await API.put(`/sales/cancelapp`, {\n      id: appId\n    });\n    return true;\n  };\n}\nexport function getFundingRequests() {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_FUNDING_REQUESTS\n    });\n\n    try {\n      const response = await API.get(`/sales/fundingrequests`);\n      dispatch({\n        type: GET_FUNDING_REQUESTS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_FUNDING_REQUESTS_FAILED\n      });\n    }\n  };\n}\nexport function setSelectedFundingRequest(item) {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_SELECTED_FUNDING_REQUEST,\n      payload: item\n    });\n  };\n}\nexport function changeSelectedFundingRequestStatus(id, status) {\n  return async function (dispatch) {\n    const response = await API.put(`/sales/fundingrequest/${id}`, {\n      status\n    });\n    dispatch({\n      type: CHANGE_SELECTED_FUNDING_REQUEST_STATUS,\n      payload: status\n    });\n  };\n}","map":{"version":3,"sources":["/home/freedom/Music/tcp-frontend/src/redux/actions/admin.js"],"names":["API","GET_PREAPPROVALS","GET_PREAPPROVALS_SUCCESS","GET_PREAPPROVALS_FAILED","SET_SELECTED_PREAPPROVAL","CHANGE_SELECTED_PREAPPROVAL_STATUS","SET_SELECTED_PENDING_APPLICATION","CHANGE_SELECTED_PENDING_APPLICATION_STATUS","GET_FUNDING_REQUESTS","GET_FUNDING_REQUESTS_SUCCESS","GET_FUNDING_REQUESTS_FAILED","SET_SELECTED_FUNDING_REQUEST","CHANGE_SELECTED_FUNDING_REQUEST_STATUS","getPreapprovals","dispatch","type","response","get","payload","data","error","setSelectedPreApproval","item","changeSelectedPreApprovalStatus","id","status","put","setSelectedPendingApplication","changeSelectedPendingApplicationStatus","requestFunding","appId","deliveryDate","post","app_id","delivery_date","requestCancel","getFundingRequests","setSelectedFundingRequest","changeSelectedFundingRequestStatus"],"mappings":"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","sourcesContent":["import API from '../../api';\n\nexport const GET_PREAPPROVALS = \"GET_PREAPPROVALS\";\nexport const GET_PREAPPROVALS_SUCCESS = \"GET_PREAPPROVALS_SUCCESS\";\nexport const GET_PREAPPROVALS_FAILED = \"GET_PREAPPROVALS_FAILED\";\n\nexport const SET_SELECTED_PREAPPROVAL = \"SET_SELECTED_PREAPPROVAL\";\nexport const CHANGE_SELECTED_PREAPPROVAL_STATUS = \"CHANGE_SELECTED_PREAPPROVAL_STATUS\";\n\nexport const SET_SELECTED_PENDING_APPLICATION = \"SET_SELECTED_PENDING_APPLICATION\";\nexport const CHANGE_SELECTED_PENDING_APPLICATION_STATUS = \"CHANGE_SELECTED_PENDING_APPLICATION_STATUS\";\n\nexport const GET_FUNDING_REQUESTS = \"GET_FUNDING_REQUESTS\";\nexport const GET_FUNDING_REQUESTS_SUCCESS = \"GET_FUNDING_REQUESTS_SUCCESS\";\nexport const GET_FUNDING_REQUESTS_FAILED = \"GET_FUNDING_REQUESTS_FAILED\";\nexport const SET_SELECTED_FUNDING_REQUEST = \"SET_SELECTED_FUNDING_REQUEST\";\nexport const CHANGE_SELECTED_FUNDING_REQUEST_STATUS = \"CHANGE_SELECTED_FUNDING_REQUEST_STATUS\";\n\nexport function getPreapprovals() {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_PREAPPROVALS\n        });\n        try {\n            const response = await API.get(`/sales/preapprovals`);\n            dispatch({\n                type: GET_PREAPPROVALS_SUCCESS,\n                payload: response.data\n            })\n        } catch (error) {\n            dispatch({\n                type: GET_PREAPPROVALS_FAILED\n            })\n        }\n    }\n}\n\nexport function setSelectedPreApproval(item) {\n    return async function(dispatch) {\n        dispatch({\n            type: SET_SELECTED_PREAPPROVAL,\n            payload: item\n        });\n    }\n}\n\nexport function changeSelectedPreApprovalStatus(id, status) {\n    return async function(dispatch) {\n        const response = await API.put(`/sales/preapproval/${id}`, { status });\n        dispatch({\n            type: CHANGE_SELECTED_PREAPPROVAL_STATUS,\n            payload: status\n        })\n    }\n}\n\nexport function setSelectedPendingApplication(item) {\n    return async function(dispatch) {\n        dispatch({\n            type: SET_SELECTED_PENDING_APPLICATION,\n            payload: item\n        });\n    }\n}\n\nexport function changeSelectedPendingApplicationStatus(id, status) {\n    return async function(dispatch) {\n        // const response = await API.put(`/sales/preapproval/${id}`, { status });\n        dispatch({\n            type: CHANGE_SELECTED_PREAPPROVAL_STATUS,\n            payload: status\n        })\n    }\n}\n\nexport function requestFunding(appId, deliveryDate) {\n    return async function(dispatch) {\n        const response = await API.post(`/sales/fundingrequests`, {\n            app_id: appId,\n            delivery_date: deliveryDate\n        });\n        return true;\n    }\n}\n\nexport function requestCancel(appId) {\n    return async function(dispatch) {\n        const response = await API.put(`/sales/cancelapp`, {\n            id: appId\n        });\n        return true;\n    }\n}\n\nexport function getFundingRequests() {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_FUNDING_REQUESTS\n        });\n        try {\n            const response = await API.get(`/sales/fundingrequests`);\n            dispatch({\n                type: GET_FUNDING_REQUESTS_SUCCESS,\n                payload: response.data\n            })\n        } catch (error) {\n            dispatch({\n                type: GET_FUNDING_REQUESTS_FAILED\n            })\n        }\n    }\n}\n\nexport function setSelectedFundingRequest(item) {\n    return async function(dispatch) {\n        dispatch({\n            type: SET_SELECTED_FUNDING_REQUEST,\n            payload: item\n        });\n    }\n}\n\nexport function changeSelectedFundingRequestStatus(id, status) {\n    return async function(dispatch) {\n        const response = await API.put(`/sales/fundingrequest/${id}`, { status });\n        dispatch({\n            type: CHANGE_SELECTED_FUNDING_REQUEST_STATUS,\n            payload: status\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}