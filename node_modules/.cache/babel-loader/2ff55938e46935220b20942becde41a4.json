{"ast":null,"code":"var _jsxFileName = \"/home/freedom/Music/tcp2.0-frontend/src/screens/Dealer/ApplyPreFilledPage/index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ApplyPreFilledView from './applyPreFilledView';\nimport { setReorderCustomerById, changeCustomer, sendAll, changeCustomerContact, addProduct } from 'redux/actions/customer';\nimport { getCustomerHistory, getCustomerPaymentHistory } from 'redux/actions/customers';\n\nconst ApplyPreView = props => {\n  return /*#__PURE__*/React.createElement(ApplyPreFilledView, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  customer: state.customer,\n  customerData: state.customers\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setReorderCustomerById: data => dispatch(setReorderCustomerById(data)),\n  changeCustomer: data => dispatch(changeCustomer(data)),\n  sendAll: (data, funName, type, history) => dispatch(sendAll(data, funName, type, history)),\n  changeCustomerContact: (key, value, role) => dispatch(changeCustomerContact(key, value, role)),\n  getCustomerHistory: data => dispatch(getCustomerHistory(data)),\n  getCustomerPaymentHistory: data => dispatch(getCustomerPaymentHistory(data)),\n  addProduct: () => dispatch(addProduct())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ApplyPreView);","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/screens/Dealer/ApplyPreFilledPage/index.js"],"names":["React","connect","ApplyPreFilledView","setReorderCustomerById","changeCustomer","sendAll","changeCustomerContact","addProduct","getCustomerHistory","getCustomerPaymentHistory","ApplyPreView","props","mapStateToProps","state","customer","customerData","customers","mapDispatchToProps","dispatch","data","funName","type","history","key","value","role"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SACIC,sBADJ,EAEIC,cAFJ,EAGIC,OAHJ,EAIIC,qBAJJ,EAKIC,UALJ,QAMO,wBANP;AAQA,SACIC,kBADJ,EAEIC,yBAFJ,QAGO,yBAHP;;AAIA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,sBACI,oBAAC,kBAAD,oBAAyBA,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ;AAGH,CAJD;;AAMA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9BC,EAAAA,QAAQ,EAAED,KAAK,CAACC,QADc;AAE9BC,EAAAA,YAAY,EAAEF,KAAK,CAACG;AAFU,CAAL,CAA7B;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACrCf,EAAAA,sBAAsB,EAAEgB,IAAI,IAAID,QAAQ,CAACf,sBAAsB,CAACgB,IAAD,CAAvB,CADH;AAErCf,EAAAA,cAAc,EAAEe,IAAI,IAAID,QAAQ,CAACd,cAAc,CAACe,IAAD,CAAf,CAFK;AAGrCd,EAAAA,OAAO,EAAE,CAACc,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB,KAAkCJ,QAAQ,CAACb,OAAO,CAACc,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAsBC,OAAtB,CAAR,CAHd;AAIrChB,EAAAA,qBAAqB,EAAG,CAACiB,GAAD,EAAMC,KAAN,EAAaC,IAAb,KAAsBP,QAAQ,CAACZ,qBAAqB,CAAEiB,GAAF,EAAOC,KAAP,EAAcC,IAAd,CAAtB,CAJjB;AAKrCjB,EAAAA,kBAAkB,EAAGW,IAAD,IAAUD,QAAQ,CAACV,kBAAkB,CAACW,IAAD,CAAnB,CALD;AAMrCV,EAAAA,yBAAyB,EAAGU,IAAD,IAAUD,QAAQ,CAACT,yBAAyB,CAACU,IAAD,CAA1B,CANR;AAOrCZ,EAAAA,UAAU,EAAE,MAAMW,QAAQ,CAACX,UAAU,EAAX;AAPW,CAAL,CAAnC;;AAUA,eAAeN,OAAO,CAClBW,eADkB,EAElBK,kBAFkB,CAAP,CAGbP,YAHa,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport ApplyPreFilledView from './applyPreFilledView';\nimport { \n    setReorderCustomerById,\n    changeCustomer,\n    sendAll,\n    changeCustomerContact,\n    addProduct,\n} from 'redux/actions/customer';\n\nimport { \n    getCustomerHistory,\n    getCustomerPaymentHistory\n} from 'redux/actions/customers';\nconst ApplyPreView = (props) => { \n    return (\n        <ApplyPreFilledView { ...props }/>\n    )\n}\n\nconst mapStateToProps = state => ({\n    customer: state.customer,\n    customerData: state.customers\n});\n\nconst mapDispatchToProps = dispatch => ({\n   setReorderCustomerById: data => dispatch(setReorderCustomerById(data)),\n   changeCustomer: data => dispatch(changeCustomer(data)),\n   sendAll: (data, funName, type, history) => dispatch(sendAll(data, funName, type, history)),\n   changeCustomerContact : (key, value, role) => dispatch(changeCustomerContact (key, value, role)),\n   getCustomerHistory: (data) => dispatch(getCustomerHistory(data)),\n   getCustomerPaymentHistory: (data) => dispatch(getCustomerPaymentHistory(data)),\n   addProduct: () => dispatch(addProduct()),\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ApplyPreView);"]},"metadata":{},"sourceType":"module"}