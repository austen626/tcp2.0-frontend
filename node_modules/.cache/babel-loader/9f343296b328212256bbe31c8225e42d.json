{"ast":null,"code":"var _jsxFileName = \"/home/freedom/Music/tcp-frontend/src/screens/Dealer/PreFilled/preFilledForm.js\";\nimport React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport InputMask from 'react-input-mask';\nimport Header from 'components/Sales/Header';\nimport Footer from 'components/Sales/Footer';\nimport Header2 from 'components/Sales/Header2';\nimport Checkbox from 'components/Checkbox';\nimport { FormFieldsContainer, PrefilledFooter } from './style';\nimport { states_info } from 'assets/options';\nimport { IconHome } from 'assets/images';\nimport Loader from 'shared/Loader';\n\nclass PreFilledForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      validated: false\n    };\n\n    this.changeState = data => {\n      this.props.changeCustomer(data);\n    };\n\n    this.changeFormState = (key, value, role = \"main\") => {\n      this.props.changeCustomerContact(key, value, role);\n    };\n\n    this.onSend = type => {\n      const {\n        sendAll,\n        customer\n      } = this.props;\n      let productType = [];\n      const {\n        contact\n      } = customer;\n      const {\n        main_app,\n        co_app,\n        same_address,\n        co_enabled,\n        co_complete,\n        co_separate\n      } = contact;\n      const typeStructure = {\n        'food': 'food',\n        'food-app': 'food, appliance',\n        'app': 'appliance'\n      };\n      productType.push(typeStructure[type]);\n      const body = {\n        \"contact\": {\n          \"same_address\": same_address,\n          \"co_enabled\": co_enabled,\n          \"co_complete\": co_complete,\n          \"co_separate\": co_separate,\n          \"product_type\": productType,\n          \"main_app\": {\n            \"cif_number\": main_app.cif_number,\n            \"nortridge_cif_number\": main_app.nortridge_cif_number || null,\n            \"name\": main_app.name,\n            \"email\": main_app.email,\n            \"cell_phone\": main_app.cell_phone,\n            \"street\": main_app.street,\n            \"city\": main_app.city,\n            \"state\": main_app.state,\n            \"zip\": main_app.zip,\n            \"home_phone\": \"\"\n          },\n          \"co_app\": {\n            \"name\": co_app.name,\n            \"email\": co_app.email,\n            \"cell_phone\": co_app.cell_phone,\n            \"home_phone\": co_app.home_phone,\n            \"street\": co_app.street,\n            \"city\": co_app.city,\n            \"state\": co_app.state,\n            \"zip\": co_app.zip\n          }\n        }\n      };\n      sendAll(body, undefined, \"pre-order\", this.props.history);\n    };\n\n    this.handleSubmit = (event, type) => {\n      event.preventDefault();\n      const formData = document.getElementsByTagName('form')[0];\n      this.setState({\n        validated: true\n      });\n\n      if (formData.checkValidity() === false) {\n        event.stopPropagation();\n      } else {\n        this.onSend(type);\n      }\n    };\n\n    this.onSameAddressChecked = app => {\n      this.changeFormState('street', app.street, 'co');\n      this.changeFormState('city', app.city, 'co');\n      this.changeFormState('state', app.state, 'co');\n      this.changeFormState('zip', app.zip, 'co');\n      this.changeFormState('cell_phone', app.cell_phone, 'co');\n    };\n\n    this.setSameEmailAddress = app => {\n      this.changeFormState('email', app.email, 'co');\n    };\n\n    this.renderApplicantForm = (app, role, mainData) => {\n      const {\n        same_address\n      } = this.props.customer.contact;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form.Label, {\n        className: \"group-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }, \"PERSONAL INFORMATION\"), /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }\n      }, role === \"main\" ? \"\" : \"Co-applicant \", \"Name\"), /*#__PURE__*/React.createElement(Form.Label, {\n        className: \"form-label-required\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }\n      }, \"required\"), /*#__PURE__*/React.createElement(Form.Control, {\n        required: true,\n        autoComplete: \"none\",\n        value: app.name || '',\n        onChange: e => this.changeFormState(\"name\", e.target.value, role),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Form.Label, {\n        className: \"group-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }, \"Address\"), role === \"co\" && /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: same_address,\n        onChange: () => {\n          this.changeState({\n            same_address: !same_address\n          });\n\n          if (!same_address) {\n            this.setState({\n              same_address: !same_address\n            });\n            this.onSameAddressChecked(mainData);\n          }\n        },\n        label: \"Same Address\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }\n      }, \"Street\"), /*#__PURE__*/React.createElement(Form.Control, {\n        required: true,\n        autoComplete: \"none\",\n        value: app.street || '',\n        onChange: e => this.changeFormState(\"street\", e.target.value, role),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }\n      }, \"City\"), /*#__PURE__*/React.createElement(Form.Control, {\n        required: true,\n        autoComplete: \"none\",\n        value: app.city || '',\n        onChange: e => this.changeFormState(\"city\", e.target.value, role),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(Form.Control, {\n        required: true,\n        autoComplete: \"none\",\n        as: \"select\",\n        value: app.state || '',\n        onChange: e => this.changeFormState(\"state\", e.target.value, role),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }\n      }, (app.state === undefined || app.state === \"\") && /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 29\n        }\n      }, \"Choose...\"), states_info.map(info => /*#__PURE__*/React.createElement(\"option\", {\n        key: info.abbreviation,\n        value: info.abbreviation,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }\n      }, info.name)))), /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }\n      }, \"ZIP Number\"), /*#__PURE__*/React.createElement(Form.Control, {\n        required: true,\n        autoComplete: \"none\",\n        type: \"text\",\n        value: app.zip || '',\n        pattern: \"^\\\\d{5}(?:[-\\\\s]\\\\d{4})?$\",\n        onChange: e => this.changeFormState(\"zip\", e.target.value, role),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }\n      }, \"Phone\"), /*#__PURE__*/React.createElement(InputMask, {\n        required: true,\n        autoComplete: \"none\",\n        className: \"form-control\",\n        pattern: \"[0-9]{3}-[0-9]{3}-[0-9]{4}\",\n        mask: \"999-999-9999\",\n        maskChar: \"\",\n        value: app.cell_phone || '',\n        onChange: e => this.changeFormState(\"cell_phone\", e.target.value, role),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }\n      })));\n    };\n\n    this.handleArrowBack = () => {\n      this.props.history.replace('/');\n    };\n  }\n\n  componentDidMount() {\n    const {\n      setReorderCustomerById\n    } = this.props;\n    const id = this.props.match.params.id;\n    setReorderCustomerById(id);\n  }\n\n  render() {\n    const validated = this.state.validated;\n    const {\n      co_enabled,\n      main_app,\n      co_app,\n      co_complete,\n      co_separate\n    } = this.props.customer.contact;\n    const {\n      isSettingCustomerDetails,\n      isCustomerFormLoading\n    } = this.props.customer;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sales\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }\n    }, (isSettingCustomerDetails || isCustomerFormLoading) && /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 76\n      }\n    }), /*#__PURE__*/React.createElement(Header, {\n      history: this.props.history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: IconHome,\n      alt: \"home\",\n      className: \"icon-home\",\n      onClick: () => {\n        this.props.history.replace('/');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Header2, {\n      id: -1,\n      history: this.props.history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(FormFieldsContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      noValidate: true,\n      validated: validated,\n      autoComplete: \"prefilled\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 29\n      }\n    }, this.renderApplicantForm(this.props.customer.contact.main_app, \"main\"), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      checked: co_enabled,\n      onChange: () => {\n        if (co_enabled) {\n          this.changeState({\n            co_enabled: !co_enabled,\n            same_address: false,\n            co_street: '',\n            co_city: '',\n            co_state: '',\n            co_zip: ''\n          });\n        } else {\n          this.changeState({\n            co_enabled: !co_enabled\n          });\n        }\n      },\n      label: \"Add co-applicant\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 37\n      }\n    })), co_enabled && this.renderApplicantForm(this.props.customer.contact.co_app, \"co\", this.props.customer.contact.main_app), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 37\n      }\n    }, \"Applicant Email\"), /*#__PURE__*/React.createElement(Form.Control, {\n      autoComplete: \"none\",\n      pattern: \"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+$\",\n      type: \"email\",\n      value: main_app.email || '',\n      onChange: e => this.changeFormState(\"email\", e.target.value, 'main'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 37\n      }\n    })), co_enabled && /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      checked: co_complete,\n      onChange: () => {\n        if (co_complete) {\n          this.changeState({\n            co_complete: !co_complete\n          });\n        } else {\n          this.changeState({\n            co_complete: !co_complete\n          });\n        }\n      },\n      label: \"Completing form for co-applicant.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 41\n      }\n    })), co_enabled && /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 37\n      }\n    }, \"Co-applicant Email\"), /*#__PURE__*/React.createElement(Form.Control, {\n      autoComplete: \"none\",\n      pattern: \"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+$\",\n      type: \"email\",\n      value: co_app.email || '',\n      onChange: e => this.changeFormState(\"email\", e.target.value, 'co'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 37\n      }\n    })), co_enabled && /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      checked: co_separate,\n      onChange: () => {\n        if (co_separate) {\n          this.changeState({\n            co_separate: !co_separate\n          });\n        } else {\n          this.setSameEmailAddress(this.props.customer.contact.main_app);\n          this.changeState({\n            co_separate: !co_separate\n          });\n        }\n      },\n      label: \"Co-applicant does not have separate email address.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PrefilledFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"click\",\n      onClick: e => this.handleSubmit(e, 'food'),\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 33\n      }\n    }, \"Request for Food\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"click\",\n      onClick: e => this.handleSubmit(e, 'app'),\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 33\n      }\n    }, \"Request for Appliance\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"click\",\n      onClick: e => this.handleSubmit(e, 'food-app'),\n      className: \"button responsive-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 33\n      }\n    }, \"Request for Food & Appliance \"))))));\n  }\n\n}\n\nexport default PreFilledForm;","map":{"version":3,"sources":["/home/freedom/Music/tcp-frontend/src/screens/Dealer/PreFilled/preFilledForm.js"],"names":["React","Component","Button","Form","InputMask","Header","Footer","Header2","Checkbox","FormFieldsContainer","PrefilledFooter","states_info","IconHome","Loader","PreFilledForm","state","validated","changeState","data","props","changeCustomer","changeFormState","key","value","role","changeCustomerContact","onSend","type","sendAll","customer","productType","contact","main_app","co_app","same_address","co_enabled","co_complete","co_separate","typeStructure","push","body","cif_number","nortridge_cif_number","name","email","cell_phone","street","city","zip","home_phone","undefined","history","handleSubmit","event","preventDefault","formData","document","getElementsByTagName","setState","checkValidity","stopPropagation","onSameAddressChecked","app","setSameEmailAddress","renderApplicantForm","mainData","e","target","map","info","abbreviation","handleArrowBack","replace","componentDidMount","setReorderCustomerById","id","match","params","render","isSettingCustomerDetails","isCustomerFormLoading","co_street","co_city","co_state","co_zip"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Form } from 'react-bootstrap';\n\nimport InputMask from 'react-input-mask';\n\nimport Header from 'components/Sales/Header';\nimport Footer from 'components/Sales/Footer';\n\nimport Header2 from 'components/Sales/Header2';\nimport Checkbox from 'components/Checkbox';\n\nimport { FormFieldsContainer, PrefilledFooter } from './style';\nimport { states_info } from 'assets/options';\nimport { IconHome } from 'assets/images';\n\nimport Loader from 'shared/Loader';\n\nclass PreFilledForm extends Component {\n\n    state = {\n        validated: false,\n    }\n    componentDidMount() {\n        const { setReorderCustomerById } = this.props\n        const id = this.props.match.params.id;\n        setReorderCustomerById(id)\n    }\n    changeState = (data) => {\n        this.props.changeCustomer(data);\n    }\n\n    changeFormState = (key, value, role = \"main\") => {\n        this.props.changeCustomerContact(key, value, role);\n    }\n\n    onSend = (type) => {\n        const { sendAll, customer } = this.props;\n        let productType = [];\n        const { contact } = customer;\n        const { main_app, co_app, same_address,  co_enabled, co_complete, co_separate} = contact;\n        const typeStructure = {\n            'food': 'food',\n            'food-app': 'food, appliance',\n            'app': 'appliance'\n        }\n        productType.push(typeStructure[type])\n        const body = {\n            \"contact\": {\n               \"same_address\": same_address,\n                \"co_enabled\": co_enabled,\n                \"co_complete\": co_complete,\n                \"co_separate\": co_separate,\n                \"product_type\": productType,\n                \"main_app\": {\n                    \"cif_number\": main_app.cif_number,\n                    \"nortridge_cif_number\": main_app.nortridge_cif_number || null,\n                    \"name\": main_app.name,\n                    \"email\": main_app.email,\n                    \"cell_phone\": main_app.cell_phone,\n                    \"street\": main_app.street,\n                    \"city\": main_app.city,\n                    \"state\": main_app.state,\n                    \"zip\": main_app.zip,\n                    \"home_phone\": \"\"\n                },\n                \"co_app\": {\n                    \"name\": co_app.name,\n                    \"email\": co_app.email,\n                    \"cell_phone\": co_app.cell_phone,\n                    \"home_phone\": co_app.home_phone,\n                    \"street\": co_app.street,\n                    \"city\": co_app.city,\n                    \"state\": co_app.state,\n                    \"zip\": co_app.zip\n                }\n            },\n            \n        }\n        sendAll(body, undefined, \"pre-order\", this.props.history);\n    }\n\n    handleSubmit = (event, type) => {\n        event.preventDefault();\n        const formData = document.getElementsByTagName('form')[0];       \n      \n        this.setState({ validated: true });\n        if (formData.checkValidity() === false) {\n            event.stopPropagation();\n        } else {\n           this.onSend(type);\n        }\n    }\n    onSameAddressChecked = (app) => {\n        this.changeFormState('street', app.street, 'co')\n        this.changeFormState('city', app.city, 'co')\n        this.changeFormState('state', app.state, 'co')\n        this.changeFormState('zip', app.zip, 'co')\n        this.changeFormState('cell_phone', app.cell_phone, 'co')\n    }\n\n    \n    setSameEmailAddress = (app) => {\n        this.changeFormState('email', app.email, 'co')\n    }\n    renderApplicantForm = (app, role, mainData) => {\n        \n        const { same_address }= this.props.customer.contact;\n        return (\n            <>\n                <Form.Label className=\"group-label\">PERSONAL INFORMATION</Form.Label>\n                <Form.Group>\n                    <Form.Label>{ role === \"main\" ?  \"\" : \"Co-applicant \"}Name</Form.Label>\n                    <Form.Label className=\"form-label-required\">required</Form.Label>\n                    <Form.Control\n                        required\n                        autoComplete=\"none\"\n                        value={app.name || ''}\n                        onChange={e => this.changeFormState(\"name\", e.target.value, role) }\n                    />\n                </Form.Group>                \n                <Form.Label className=\"group-label\">Address</Form.Label>\n                {\n                    role === \"co\" && \n                    <Form.Group>\n                        <Checkbox\n                            checked={same_address}\n                            onChange={() => {\n                                this.changeState({same_address: !same_address });\n                                if (!same_address) {                                   \n                                    this.setState({same_address: !same_address});\n                                    this.onSameAddressChecked(mainData);\n                                }\n                            } }\n                            label=\"Same Address\"\n                        />\n                    </Form.Group>\n                }\n                <Form.Group>\n                    <Form.Label>Street</Form.Label>\n                    <Form.Control\n                        required\n                        autoComplete=\"none\"\n                        value={app.street || ''}\n                        onChange={e => this.changeFormState(\"street\", e.target.value, role) }\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>City</Form.Label>\n                    <Form.Control\n                        required\n                        autoComplete=\"none\"\n                        value={app.city || ''}\n                        onChange={e => this.changeFormState(\"city\", e.target.value, role) }\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>State</Form.Label>\n                    <Form.Control\n                        required\n                        autoComplete=\"none\"\n                        as=\"select\"\n                        value={app.state || ''}\n                        onChange={e => this.changeFormState(\"state\", e.target.value, role) }\n                    >\n                        { (app.state === undefined || app.state === \"\") && (\n                            <option value=\"\">Choose...</option>\n                        )}\n                        { states_info.map(info => (\n                            <option key={info.abbreviation} value={info.abbreviation}>{info.name}</option>\n                        )) }\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>ZIP Number</Form.Label>\n                    <Form.Control\n                        required\n                        autoComplete=\"none\"\n                        type=\"text\"\n                        value={app.zip || ''}\n                        pattern=\"^\\d{5}(?:[-\\s]\\d{4})?$\"\n                        onChange={e => this.changeFormState(\"zip\", e.target.value, role) }\n                    />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>Phone</Form.Label>\n                    <InputMask\n                        required\n                        autoComplete=\"none\"\n                        className=\"form-control\"\n                        pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n                        mask=\"999-999-9999\"\n                        maskChar=\"\"\n                        value={app.cell_phone || ''}\n                        onChange={e => this.changeFormState(\"cell_phone\", e.target.value, role)}\n                    />\n                </Form.Group>               \n            </>\n        )\n    }\n\n    handleArrowBack = () => {\n        this.props.history.replace('/');\n    }\n\n    render() {\n        const validated = this.state.validated;\n        const { co_enabled, main_app, co_app, co_complete, co_separate } = this.props.customer.contact;\n        const { isSettingCustomerDetails, isCustomerFormLoading } = this.props.customer;\n        return (\n            <div className=\"sales\">\n                {\n                    (isSettingCustomerDetails || isCustomerFormLoading) && <Loader />\n                }\n                <Header history={this.props.history}>\n                    <img src={IconHome} alt=\"home\" className=\"icon-home\" onClick={() => {this.props.history.replace('/');}} />\n                </Header>\n                \n                <Header2\n                    id={-1}\n                    history={this.props.history}\n                />        \n                   \n                <FormFieldsContainer> \n                    <Form noValidate validated={validated}  autoComplete=\"prefilled\">\n                        <div className=\"main\">                            \n                            <div className=\"container\">                           \n                                \n                                { this.renderApplicantForm(this.props.customer.contact.main_app, \"main\") }\n                                <Form.Group>\n                                    <Checkbox\n                                        checked={co_enabled}\n                                        onChange={() => {\n                                            if (co_enabled) {\n                                                this.changeState({\n                                                    co_enabled: !co_enabled,\n                                                    same_address: false,\n                                                    co_street: '',\n                                                    co_city: '',\n                                                    co_state: '',\n                                                    co_zip: ''\n                                                });\n                                            } else {\n                                                this.changeState({co_enabled: !co_enabled});\n                                            }\n                                        }}\n                                        label=\"Add co-applicant\"\n                                    />\n                                </Form.Group>\n                                { co_enabled && this.renderApplicantForm(this.props.customer.contact.co_app, \"co\", this.props.customer.contact.main_app) }\n                                <Form.Group>\n                                    <Form.Label>Applicant Email</Form.Label>\n                                    {/* <Form.Label className=\"form-label-required\">required</Form.Label> */}\n                                    <Form.Control\n                                        autoComplete=\"none\"\n                                        pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                                        type=\"email\"\n                                        value={main_app.email || ''}\n                                        onChange={e => this.changeFormState(\"email\", e.target.value, 'main') }\n                                    />\n                                </Form.Group>\n                                {\n                                  co_enabled && \n                                    <Form.Group>\n                                        <Checkbox\n                                            checked={co_complete}\n                                            onChange={() => {\n                                                if (co_complete) {\n                                                    this.changeState({\n                                                        co_complete: !co_complete,\n                                                    });\n                                                } else {\n                                                    this.changeState({co_complete: !co_complete});\n                                                }\n                                            }}\n                                            label=\"Completing form for co-applicant.\"\n                                    />\n                                    </Form.Group>\n                                }\n                                {\n                                  co_enabled && \n                                  <Form.Group>\n                                    <Form.Label>Co-applicant Email</Form.Label>\n                                    {/* <Form.Label className=\"form-label-required\">required</Form.Label> */}\n                                    <Form.Control\n                                        autoComplete=\"none\"\n                                        pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                                        type=\"email\"\n                                        value={co_app.email || ''}\n                                        onChange={e => this.changeFormState(\"email\", e.target.value, 'co') }\n                                    />\n                                </Form.Group>\n                              }\n                              {\n                                  co_enabled && \n                                    <Form.Group>\n                                        <Checkbox\n                                            checked={co_separate}\n                                            onChange={() => {\n                                                if (co_separate) {\n                                                    this.changeState({\n                                                        co_separate: !co_separate,\n                                                    });\n                                                } else {\n                                                    this.setSameEmailAddress(this.props.customer.contact.main_app)\n                                                    this.changeState({co_separate: !co_separate});\n                                                }\n                                            }}\n                                            label=\"Co-applicant does not have separate email address.\"\n                                    />\n                                    </Form.Group>\n                                }\n                            </div>\n                        </div>\n                        <Footer>\n                            <PrefilledFooter>\n                                <Button type=\"click\" onClick={(e) => this.handleSubmit(e, 'food')} className=\"button\">Request for Food</Button>\n                                <Button type=\"click\" onClick={(e) => this.handleSubmit(e, 'app')} className=\"button\">Request for Appliance</Button>\n                                <Button type=\"click\" onClick={(e) => this.handleSubmit(e, 'food-app')} className=\"button responsive-width\">Request for Food & Appliance </Button>\n                            </PrefilledFooter>\n                            \n                        </Footer>\n                    </Form>                      \n                </FormFieldsContainer>\n            </div>\n        )\n    }\n}\n\nexport default PreFilledForm;"]},"metadata":{},"sourceType":"module"}