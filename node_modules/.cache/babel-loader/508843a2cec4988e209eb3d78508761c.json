{"ast":null,"code":"import API from '../../api';\nimport { pushNotification } from 'utils/notification';\nimport { message } from 'shared/constant';\nimport { GET_USER_START, GET_USER_SUCCESS, GET_USER_FAILURE, UPDATE_USER_START, UPDATE_USER_SUCCESS, UPDATE_USER_FAILURE, GET_STAFF_REQUEST, GET_STAFF_SUCCESS, GET_STAFF_FAILED, DELETE_STAFF_REQUEST, DELETE_STAFF_SUCCESS, DELETE_STAFF_FAILED, INVITE_STAFF_REQUEST, INVITE_STAFF_SUCCESS, INVITE_STAFF_FAILED } from './actionTypes';\nexport function getUserDetails(init) {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_USER_START\n    });\n\n    try {\n      const response = await API.get(`/accounts/me`);\n\n      if (response) {\n        const responseData = response.data;\n        init && init({\n          email: responseData.email,\n          phone: responseData.phone,\n          firstName: responseData.first_name,\n          lastName: responseData.last_name\n        });\n        dispatch({\n          type: GET_USER_SUCCESS,\n          payload: responseData\n        });\n      }\n    } catch (error) {\n      error && error.response && pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: GET_USER_FAILURE\n      });\n    }\n  };\n}\nexport function updateUserRequest(action) {\n  return async function (dispatch) {\n    dispatch({\n      type: UPDATE_USER_START\n    });\n\n    try {\n      const response = await API.put(`/accounts/update-profile`, action);\n\n      if (response) {\n        dispatch({\n          type: UPDATE_USER_SUCCESS,\n          payload: action\n        });\n        pushNotification(message.USER_UPDATE_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n      }\n    } catch (error) {\n      pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: UPDATE_USER_FAILURE\n      });\n    }\n  };\n}\nexport function getStaffRequest(action) {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_STAFF_REQUEST\n    });\n\n    try {\n      const response = await API.get(`/accounts/users`);\n\n      if (response) {\n        const responseData = response.data;\n        dispatch({\n          type: GET_STAFF_SUCCESS,\n          payload: responseData\n        });\n      }\n    } catch (error) {\n      error && error.response && pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: GET_STAFF_FAILED\n      });\n    }\n  };\n}\nexport function deleteStaffRequest(action) {\n  return async function (dispatch) {\n    dispatch({\n      type: DELETE_STAFF_REQUEST\n    });\n\n    try {\n      const response = await API.put(`/accounts/user-delete/${action.deleteDivId}`);\n\n      if (response) {\n        dispatch({\n          type: DELETE_STAFF_SUCCESS\n        });\n        action.getStaffRequest && action.getStaffRequest();\n      }\n\n      pushNotification(message.DELETE_SUCCESSFULLY, 'success', 'TOP_RIGHT', 3000);\n    } catch (error) {\n      error && error.response && pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: DELETE_STAFF_FAILED\n      });\n    }\n  };\n}\nexport function inviteStaffRequest(action) {\n  return async function (dispatch) {\n    dispatch({\n      type: INVITE_STAFF_REQUEST\n    });\n    const data = {\n      email: action.email,\n      role: action.role\n    };\n\n    try {\n      const response = await API.post(`/accounts/invite`, data);\n\n      if (response) {\n        dispatch({\n          type: INVITE_STAFF_SUCCESS\n        });\n      }\n\n      action.toggleModal && action.toggleModal();\n      pushNotification(message.INVITE_SUBMISSION_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n    } catch (error) {\n      error && error.response && pushNotification(error.response.data.message, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: INVITE_STAFF_FAILED\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/home/freedom/Music/tcp-frontend/src/redux/actions/userAction.js"],"names":["API","pushNotification","message","GET_USER_START","GET_USER_SUCCESS","GET_USER_FAILURE","UPDATE_USER_START","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","GET_STAFF_REQUEST","GET_STAFF_SUCCESS","GET_STAFF_FAILED","DELETE_STAFF_REQUEST","DELETE_STAFF_SUCCESS","DELETE_STAFF_FAILED","INVITE_STAFF_REQUEST","INVITE_STAFF_SUCCESS","INVITE_STAFF_FAILED","getUserDetails","init","dispatch","type","response","get","responseData","data","email","phone","firstName","first_name","lastName","last_name","payload","error","updateUserRequest","action","put","USER_UPDATE_SUCCESS","getStaffRequest","deleteStaffRequest","deleteDivId","DELETE_SUCCESSFULLY","inviteStaffRequest","role","post","toggleModal","INVITE_SUBMISSION_SUCCESS"],"mappings":"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","sourcesContent":["import API from '../../api';\nimport { pushNotification } from 'utils/notification';\nimport { message } from 'shared/constant';\nimport {\n    GET_USER_START,\n    GET_USER_SUCCESS,\n    GET_USER_FAILURE,\n    UPDATE_USER_START,\n    UPDATE_USER_SUCCESS,\n    UPDATE_USER_FAILURE,    \n    GET_STAFF_REQUEST,\n    GET_STAFF_SUCCESS,\n    GET_STAFF_FAILED,\n    DELETE_STAFF_REQUEST,\n    DELETE_STAFF_SUCCESS,\n    DELETE_STAFF_FAILED,\n    INVITE_STAFF_REQUEST,\n    INVITE_STAFF_SUCCESS,\n    INVITE_STAFF_FAILED\n} from './actionTypes';\n\nexport function getUserDetails(init) {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_USER_START\n        });\n        try {\n            const response = await API.get(`/accounts/me`);            \n            if(response) {\n                const responseData = response.data;\n                init && init({\n                    email: responseData.email,\n                    phone: responseData.phone,\n                    firstName: responseData.first_name,\n                    lastName: responseData.last_name,\n                })\n                dispatch({\n                    type: GET_USER_SUCCESS,\n                    payload: responseData\n                }); \n            }\n            \n        } catch (error) {\n            error && error.response && pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: GET_USER_FAILURE\n            })\n        }\n    }\n}\n\nexport function updateUserRequest(action) {\n    return async function(dispatch) {\n        dispatch({\n            type: UPDATE_USER_START\n        });\n        try {\n            const response = await API.put(`/accounts/update-profile`, action);            \n            if(response) {\n                dispatch({\n                    type: UPDATE_USER_SUCCESS,\n                    payload: action\n                }); \n                pushNotification(message.USER_UPDATE_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n            }\n            \n        } catch (error) {\n            pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: UPDATE_USER_FAILURE\n            })\n        }\n    }\n}\n\nexport function getStaffRequest(action) {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_STAFF_REQUEST\n        });\n        try {\n            const response = await API.get(`/accounts/users`);\n            if(response) {\n                const responseData = response.data;\n               \n                dispatch({\n                    type: GET_STAFF_SUCCESS,\n                    payload: responseData\n                }); \n            }\n            \n        } catch (error) {\n            error && error.response && pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: GET_STAFF_FAILED\n            })\n        }\n    }\n}\n\nexport function deleteStaffRequest(action) {\n    return async function(dispatch) {\n        dispatch({\n            type: DELETE_STAFF_REQUEST\n        });\n        try {\n            const response = await API.put(`/accounts/user-delete/${action.deleteDivId}`);\n            if(response) {\n                dispatch({\n                    type: DELETE_STAFF_SUCCESS,\n                });\n                action.getStaffRequest && action.getStaffRequest(); \n            }\n           \n            pushNotification(message.DELETE_SUCCESSFULLY, 'success', 'TOP_RIGHT', 3000);\n            \n        } catch (error) {\n            error && error.response && pushNotification(error.response.data, 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: DELETE_STAFF_FAILED\n            })\n        }\n    }\n}\n\nexport function inviteStaffRequest(action) {\n    return async function(dispatch) {\n        dispatch({\n            type: INVITE_STAFF_REQUEST\n        });\n        const data = {\n            email: action.email,\n            role: action.role\n        };\n        try {\n            const response = await API.post(`/accounts/invite`, data);\n            if(response) {\n                dispatch({\n                    type: INVITE_STAFF_SUCCESS,\n                });\n            }\n           action.toggleModal && action.toggleModal();\n            pushNotification(message.INVITE_SUBMISSION_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n            \n        } catch (error) {\n            error && error.response && pushNotification(error.response.data.message, 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: INVITE_STAFF_FAILED\n            })\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}