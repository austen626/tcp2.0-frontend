{"ast":null,"code":"var _jsxFileName = \"/home/freedom/Music/tcp2.0-frontend/src/components/commons/dropdown.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport handleAwayClick from './customHooks/handleAwayClick'; // import previousProps from './customHooks/previousProps';\n\nimport PropTypes from 'prop-types';\nimport Button from './button';\nimport { IconDownArrow } from '../../assets/images';\n\nconst Dropdown = props => {\n  const container = useRef(null);\n  let {\n    name,\n    id,\n    className = '',\n    ariaLabel,\n    resetCounter,\n    required = false,\n    handleChange,\n    ariaRequired,\n    position = '',\n    multiple = false,\n    label,\n    validationResult,\n    error,\n    defaultValue,\n    options,\n    labelTransform = true,\n    disabled = false\n  } = props;\n  id = id || name; // Converting the options and the default value to a string to keep the default select behavior\n\n  options && options.map(item => item.value = item.value.toString());\n\n  if (multiple) {\n    defaultValue = defaultValue ? defaultValue.map(item => item.toString()) : [];\n  } else {\n    defaultValue = defaultValue ? defaultValue.toString() : '';\n  }\n\n  const previousDefault = defaultValue; //previousProps( defaultValue );\n\n  const ariaLabelledBy = id && `${id}-label`;\n  const [errorLabel, updateErrorLabel] = useState(null);\n  const [toggle, updateToggle] = useState(false);\n  const [selectedValue, updateSelected] = useState(defaultValue || undefined);\n  handleAwayClick(container, () => {\n    updateToggle(false);\n  });\n\n  const getLabel = () => {\n    let selectedLabel = '';\n    let selectedOption = selectedValue;\n\n    if (multiple) {\n      selectedLabel = selectedOption && options.filter(item => selectedOption.includes(item.value)).map(option => option.label).join(',');\n    } else {\n      const filteredItem = selectedOption && options.filter(item => item.value === selectedOption)[0];\n\n      if (filteredItem) {\n        selectedLabel = filteredItem.label;\n      }\n    }\n\n    return selectedLabel;\n  };\n\n  const handleSelection = evt => {\n    const elm = evt.currentTarget;\n    let {\n      value\n    } = elm.dataset;\n\n    if (multiple) {\n      const tempArray = selectedValue ? [...selectedValue] : [];\n\n      if (tempArray.includes(value)) {\n        const index = selectedValue.indexOf(value);\n        tempArray.splice(index, 1);\n      } else {\n        tempArray.push(value);\n      }\n\n      value = tempArray;\n    }\n\n    updateSelected(value);\n    typeof handleChange === 'function' && handleChange(value, name, evt);\n    !multiple && updateToggle(!toggle);\n    updateErrorLabel(null);\n  };\n\n  const handleToggle = () => {\n    updateToggle(!toggle);\n  };\n\n  const transformLabel = () => {\n    let transform = !multiple && selectedValue;\n\n    if (multiple && (defaultValue.length || selectedValue && selectedValue.length)) {\n      transform = true;\n    }\n\n    return transform;\n  };\n\n  const isDefaultDifferent = () => {\n    let isDifferent = false;\n\n    if (typeof previousDefault !== 'undefined' && previousDefault !== null) {\n      isDifferent = true;\n\n      if (multiple && defaultValue) {\n        const previousSorted = previousDefault.slice().sort();\n\n        if (defaultValue.length === previousSorted.length && defaultValue.slice().sort().every((val, idx) => val === previousSorted[idx])) {\n          isDifferent = false;\n        }\n      } else if (!multiple && defaultValue === previousDefault) {\n        isDifferent = false;\n      }\n    }\n\n    return isDifferent;\n  };\n\n  useEffect(() => {\n    if (validationResult && validationResult[name] && error) {\n      console.log(validationResult);\n      const errorType = validationResult[name].error;\n      const updatedErrorLabel = error[errorType] || null;\n      console.log(selectedValue);\n      console.log(updatedErrorLabel);\n\n      if (selectedValue && selectedValue.length > 0) {\n        updateErrorLabel(null);\n      } else {\n        updateErrorLabel(updatedErrorLabel);\n      }\n    } else {\n      updateErrorLabel(null);\n    }\n\n    if (isDefaultDifferent()) {\n      updateSelected(defaultValue);\n    }\n  }, [validationResult, defaultValue]);\n  useEffect(() => {\n    updateSelected(defaultValue || undefined);\n  }, [resetCounter]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `input-holder ${className}`,\n    ref: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-container dropdown scrollbar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, label && /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: id,\n    className: `form-label ${labelTransform && transformLabel() ? 'transform' : labelTransform ? '' : 'no-transform'}`,\n    id: ariaLabelledBy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 21\n    }\n  }, label), /*#__PURE__*/React.createElement(\"div\", {\n    className: `input-field`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    id: id // readOnly={ true }\n    ,\n    disabled: disabled,\n    name: id,\n    required: required,\n    \"aria-required\": ariaRequired,\n    \"aria-label\": ariaLabel // value={ selectedValue }\n    ,\n    multiple: multiple,\n    \"aria-labelledby\": ariaLabelledBy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 25\n    }\n  }, label), options && options.length > 0 && options.map((item, idx) => /*#__PURE__*/React.createElement(\"option\", {\n    key: idx,\n    value: item.value,\n    \"data-id\": item.dataId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 29\n    }\n  }, item.label))), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"select-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: \"main-logo\",\n    src: IconDownArrow,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 25\n    }\n  })))), errorLabel && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-label body-copy-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icon-info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 21\n    }\n  }), errorLabel));\n};\n\nexport default Dropdown;\nDropdown.propTypes = {\n  name: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  label: PropTypes.string,\n  options: PropTypes.array\n};","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/components/commons/dropdown.js"],"names":["React","useState","useRef","useEffect","handleAwayClick","PropTypes","Button","IconDownArrow","Dropdown","props","container","name","id","className","ariaLabel","resetCounter","required","handleChange","ariaRequired","position","multiple","label","validationResult","error","defaultValue","options","labelTransform","disabled","map","item","value","toString","previousDefault","ariaLabelledBy","errorLabel","updateErrorLabel","toggle","updateToggle","selectedValue","updateSelected","undefined","getLabel","selectedLabel","selectedOption","filter","includes","option","join","filteredItem","handleSelection","evt","elm","currentTarget","dataset","tempArray","index","indexOf","splice","push","handleToggle","transformLabel","transform","length","isDefaultDifferent","isDifferent","previousSorted","slice","sort","every","val","idx","console","log","errorType","updatedErrorLabel","dataId","propTypes","string","array"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport handleAwayClick from './customHooks/handleAwayClick';\n// import previousProps from './customHooks/previousProps';\nimport PropTypes from 'prop-types';\n\nimport Button from './button';\nimport { IconDownArrow } from '../../assets/images';\n\nconst Dropdown = ( props ) => {\n\n    const container = useRef( null );\n\n    let {\n        name,\n        id,\n        className = '',\n        ariaLabel,\n        resetCounter,\n        required = false,\n        handleChange,\n        ariaRequired,\n        position = '',\n        multiple = false,\n        label,\n        validationResult,\n        error,\n        defaultValue,\n        options,\n        labelTransform = true,\n        disabled = false\n    } = props;\n\n    id = id || name;\n\n    // Converting the options and the default value to a string to keep the default select behavior\n    options && options.map( item => item.value =  item.value.toString());\n\n    if ( multiple ) {\n\n        defaultValue = defaultValue ? defaultValue.map( item => item.toString() ) : [];\n    }\n\n    else {\n\n        defaultValue = defaultValue ? defaultValue.toString() : '';\n    }\n\n    const previousDefault = defaultValue; //previousProps( defaultValue );\n\n    const ariaLabelledBy = id && `${id}-label`;\n\n    const [ errorLabel, updateErrorLabel ] = useState( null );\n\n    const [ toggle, updateToggle ] = useState( false );\n\n    const [ selectedValue, updateSelected ] = useState( defaultValue || undefined );\n\n    handleAwayClick(container, () => {\n\n        updateToggle( false );\n    });\n\n    const getLabel = () => {\n\n        let selectedLabel = '';\n\n        let selectedOption = selectedValue;\n\n        if ( multiple ) {\n\n            selectedLabel = selectedOption && options\n                .filter( item => selectedOption.includes( item.value ) )\n                .map(( option ) => option.label ).join(',');\n        }\n\n        else {\n\n            const filteredItem = selectedOption && options.filter( item => item.value === selectedOption )[0];\n\n            if ( filteredItem ) {\n\n                selectedLabel = filteredItem.label;\n            }\n        }\n\n        return selectedLabel;\n    };\n\n    const handleSelection = evt => {\n\n        const elm = evt.currentTarget;\n\n        let {\n            value\n        } = elm.dataset;\n\n        if ( multiple ) {\n\n            const tempArray = selectedValue ? [ ...selectedValue ] : [];\n\n            if ( tempArray.includes( value ) ) {\n\n                const index = selectedValue.indexOf( value );\n\n                tempArray.splice( index, 1 );\n            }\n\n            else {\n\n                tempArray.push( value );\n            }\n\n            value = tempArray;\n        }\n\n        updateSelected( value );\n\n        typeof handleChange === 'function' && handleChange( value, name, evt );\n\n        !multiple && updateToggle( !toggle );\n\n        updateErrorLabel( null );\n    };\n\n    const handleToggle = () => {\n\n        updateToggle( !toggle );\n    };\n\n    const transformLabel = () => {\n\n        let transform = !multiple && selectedValue;\n\n        if ( multiple && ( defaultValue.length || selectedValue && selectedValue.length ) ) {\n\n            transform = true;\n        }\n\n        return transform;\n    };\n\n    const isDefaultDifferent = () => {\n\n        let isDifferent = false;\n\n        if ( typeof previousDefault !== 'undefined' && previousDefault !== null ) {\n\n            isDifferent = true;\n\n            if ( multiple && defaultValue ) {\n\n                const previousSorted = previousDefault.slice().sort();\n\n                if ( defaultValue.length === previousSorted.length && defaultValue.slice().sort().every( ( val, idx ) => val === previousSorted[ idx ] ) ) {\n\n                    isDifferent = false;\n                }\n            }\n\n            else if ( !multiple && defaultValue === previousDefault ) {\n\n                isDifferent = false;\n            }\n        }\n\n        return isDifferent;\n    };\n\n    useEffect(() => {\n\n        if ( validationResult && validationResult[ name ] && error ) {\n\n            console.log(validationResult)\n\n            const errorType = validationResult[ name ].error;\n\n            const updatedErrorLabel = error[ errorType ] || null;\n\n            console.log(selectedValue)\n            console.log(updatedErrorLabel)\n\n            if ( selectedValue && selectedValue.length > 0 ) {\n                updateErrorLabel(null);\n            }\n            else {\n                updateErrorLabel(updatedErrorLabel);\n            }\n        }\n\n        else {\n\n            updateErrorLabel( null );\n        }\n\n        if ( isDefaultDifferent() ) {\n\n            updateSelected( defaultValue );\n        }\n\n    }, [ validationResult, defaultValue ]);\n\n    useEffect( () => {\n        updateSelected( defaultValue || undefined );\n    }, [ resetCounter ] );\n\n    return (\n        <div className={`input-holder ${ className }`} ref={ container }>\n            <div className='input-container dropdown scrollbar'>\n                { label && (\n                    <label\n                        htmlFor={ id }\n                        className={`form-label ${\n                            labelTransform && transformLabel() ? 'transform' : labelTransform ? '' : 'no-transform'\n                        }`}\n                        id={ ariaLabelledBy }>\n                        {/* <Button\n                            type='button'\n                            isDisabled={ disabled }\n                            onClick={ handleToggle }>\n                            <span dangerouslySetInnerHTML={{ __html: label }} />\n                        </Button> */}\n                        {label}\n                    </label>\n                )}\n                <div className={`input-field`}>\n                    <select\n                        id={ id }\n                        // readOnly={ true }\n                        disabled={ disabled }\n                        name={ id }\n                        required={ required }\n                        aria-required={ ariaRequired }\n                        aria-label={ ariaLabel }\n                        // value={ selectedValue }\n                        multiple={ multiple }\n                        aria-labelledby={ ariaLabelledBy }>\n                        <option value=''>{ label }</option>\n                        { options && options.length > 0 && options.map( ( item, idx ) =>\n                            <option\n                                key={ idx }\n                                value={ item.value }\n                                data-id={ item.dataId }>\n                                { item.label }\n                            </option>\n                        )}\n                    </select>\n                    <span className=\"select-dropdown\">\n                        <img className=\"main-logo\" src={IconDownArrow} alt=\"\" />\n                    </span>\n                    {/* <div className='custom-styles'>\n                        <Button\n                            role= 'listbox'\n                            type= 'button'\n                            isDisabled={ disabled }\n                            className={`selected-labels ${ toggle ? 'open' : ''}${ errorLabel ? ' invalid' : ''}${ transformLabel() ? '' : ' empty'}`}\n                            onClick={ handleToggle }>\n                            { getLabel() }\n                            <span className='icon-arrow-thin'></span>\n                        </Button>\n                        { toggle &&\n                            <ul className={`options ${ multiple ? 'multiple' : ''} ${ position }`}>\n                                { options && options.map( ( item, idx ) =>\n                                    <li key={ idx }>\n                                        <Button\n                                            onClick={ handleSelection }\n                                            optionalParams={{\n                                                'data-label': item.label,\n                                                'data-value': item.value,\n                                                'data-id': item.dataId\n                                            }}>\n                                            { multiple &&\n                                                <span className={`checkbox ${ selectedValue && selectedValue.includes( item.value ) ? 'icon-check' : ''}`}></span>\n                                            }\n                                            { item.label }\n                                        </Button>\n                                    </li>\n                                )}\n                            </ul>\n                        }\n                    </div> */}\n                </div>\n            </div>\n            { errorLabel &&\n                <div className='error-label body-copy-secondary'>\n                    <span className='icon-info'></span>\n                    { errorLabel }\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Dropdown;\n\nDropdown.propTypes = {\n    name: PropTypes.string,\n    ariaLabel: PropTypes.string,\n    label: PropTypes.string,\n    options: PropTypes.array\n};"]},"metadata":{},"sourceType":"module"}