{"ast":null,"code":"var _jsxFileName = \"/home/freedom/Music/tcp2.0-frontend/src/utils/formUtils/index.js\";\nimport React from 'react';\nimport { FormControl, Form } from 'react-bootstrap';\nexport const Validations = props => {\n  const {\n    touched,\n    error,\n    validationError,\n    warning\n  } = props.props;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, touched && (error && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"field_error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 40\n    }\n  }, error) || warning && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 101\n    }\n  }, warning))), validationError && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }, validationError && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"field_error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 42\n    }\n  }, validationError)));\n};\n\nconst renderField = props => {\n  const {\n    input,\n    label,\n    name,\n    type,\n    placeholder,\n    disabled,\n    validationError,\n    meta: {\n      touched,\n      error,\n      warning\n    },\n    maxLength,\n    formClass,\n    rows\n  } = props;\n  return /*#__PURE__*/React.createElement(Form.Group, {\n    className: formClass + ' force-mb-10',\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, label && /*#__PURE__*/React.createElement(Form.Label, {\n    className: \"force_mb-5\",\n    htmlFor: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }\n  }, label || ''), /*#__PURE__*/React.createElement(FormControl, Object.assign({\n    rows: rows\n  }, input, {\n    maxLength: maxLength,\n    disabled: disabled || false,\n    type: type,\n    className: validationError || touched && error ? 'validation-error' : '',\n    placeholder: placeholder || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Validations, {\n    props: {\n      touched,\n      error,\n      validationError,\n      warning\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst RadioField = props => {\n  const {\n    input,\n    label,\n    name,\n    validationError,\n    checked,\n    formClass,\n    ...rest\n  } = props;\n  return /*#__PURE__*/React.createElement(Form.Group, {\n    className: formClass + ' force-mb-10',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Check, Object.assign({\n    label: label,\n    type: \"radio\"\n  }, input, rest, {\n    checked: input.value === rest.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport { renderField, RadioField };","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/utils/formUtils/index.js"],"names":["React","FormControl","Form","Validations","props","touched","error","validationError","warning","renderField","input","label","name","type","placeholder","disabled","meta","maxLength","formClass","rows","width","RadioField","checked","rest","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { FormControl, Form } from 'react-bootstrap';\n\nexport const Validations = (props) => {\n    const {\n        touched,\n        error,\n        validationError,\n        warning,\n    } = props.props;\n\n    return (\n        <>\n            <p>\n                {touched && ((error && <span className=\"field_error\">{error}</span>) || (warning && <span>{warning}</span>))}\n            </p>\n            {validationError && (\n                <p>\n                    {(validationError && <span className=\"field_error\">{validationError}</span>)}\n                </p>\n            )}\n        </>\n    );\n};\n\nconst renderField = (props) => {\n    const {\n        input,\n        label,\n        name,\n        type,\n        placeholder,\n        disabled,\n        validationError,\n        meta: { touched, error, warning },\n        maxLength,\n        formClass,\n        rows,\n    } = props;\n\n    return (\n        <Form.Group className={ formClass + ' force-mb-10' } style={ { width: '100%' } }>\n            {label && <Form.Label className=\"force_mb-5\" htmlFor={ name }>{label || ''}</Form.Label>}\n            <FormControl rows={ rows } { ...input } maxLength={ maxLength } disabled={ disabled || false } type={ type } className={ validationError || (touched && error) ? 'validation-error' : '' } placeholder={ placeholder || '' } />\n            <Validations\n                props={ {\n                    touched,\n                    error,\n                    validationError,\n                    warning,\n                } }\n            />\n        </Form.Group>\n    );\n};\n\nconst RadioField = (props) => {\n    const {\n        input,\n        label,\n        name,\n        validationError,\n        checked,\n        formClass,\n        ...rest\n    } = props;\n    return(\n        <Form.Group className={ formClass + ' force-mb-10' }>\n            <Form.Check label={ label }  type=\"radio\" {...input} {...rest} checked={input.value === rest.value} />\n        </Form.Group>\n    )\n}\nexport {\n    renderField,\n    RadioField\n};"]},"metadata":{},"sourceType":"module"}