{"ast":null,"code":"var _jsxFileName = \"/home/freedom/Music/tcp2.0-frontend/src/components/commons/input.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n/*\n * Common Input component\n\n * @returns {JSX.Element}\n */\n\nconst inputValidation = (inputVal, required, regexString) => {\n  const regex = regexString && new RegExp(regexString, 'i');\n  const isValid = regex && inputVal ? regex.test(inputVal) : true;\n  return !!required && inputVal === '' ? true : !isValid ? true : false;\n};\n\nconst Input = props => {\n  const {\n    type = 'text',\n    name,\n    id,\n    value,\n    defaultValue,\n    className = '',\n    ariaLabel,\n    required = false,\n    label,\n    dataName,\n    inputRef,\n    min,\n    maxLength,\n    labelTransform = true,\n    defaultText,\n    regex,\n    optionalParams,\n    disabled = false,\n    inputClass = '',\n    onFocus,\n    onBlur,\n    handleChange,\n    validationResult,\n    error,\n    checked\n  } = props;\n  const [focussed, setFocussed] = useState(!!value || !!defaultValue);\n  const [inputValue, setInputValue] = useState(value || defaultValue || '');\n  const [inputInvalid, setInputInvalid] = useState(required && !(value || defaultValue));\n\n  const updateInputValue = (newVal = '') => {\n    setInputValue(newVal);\n    setInputInvalid(inputValidation(newVal, required, regex));\n  };\n\n  const handleFocus = () => {\n    setFocussed(true);\n    typeof onFocus === 'function' && onFocus();\n  };\n\n  const handleBlur = () => {\n    setFocussed(false);\n    typeof onBlur === 'function' && onBlur();\n  };\n\n  const handleInputChange = event => {\n    updateInputValue(event.currentTarget && event.currentTarget.value);\n    typeof handleChange === 'function' && handleChange(event);\n  };\n\n  useEffect(() => {\n    if (defaultValue === undefined && value !== undefined && value !== inputValue) {\n      updateInputValue(value);\n    }\n  });\n  let errorLabel = '';\n\n  if (validationResult && validationResult[name] && error) {\n    const errorType = validationResult[name].error;\n    errorLabel = error[errorType] || null;\n  }\n\n  console.log(errorLabel);\n  const inputId = id || name,\n        ariaLabelledBy = id && `${id}-label`,\n        // showError = !!errorLabel && inputInvalid,\n  showError = !!errorLabel,\n        transform = inputValue !== '' || focussed;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `input-holder ${className} ${type} ${disabled ? 'disabled' : ''} ${showError ? 'has-error' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, label && /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: inputId,\n    className: `form-label ${labelTransform && transform ? 'transform' : ''}`,\n    id: ariaLabelledBy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    dangerouslySetInnerHTML: {\n      __html: label\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    className: `form-control ${inputClass} ${value !== '' ? 'has-input' : 'empty'} ${showError ? 'invalid' : ''}`,\n    ref: inputRef,\n    type: type,\n    id: inputId,\n    placeholder: defaultText,\n    maxLength: maxLength,\n    name: name,\n    min: min,\n    \"data-name\": dataName,\n    value: inputValue,\n    \"aria-label\": ariaLabel\n  }, label && {\n    'aria-labelledby': ariaLabelledBy\n  }, {\n    autoComplete: \"off\",\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    required: required,\n    onChange: handleInputChange,\n    \"data-regex\": regex,\n    disabled: disabled,\n    checked: checked\n  }, optionalParams, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }\n  })))), showError && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, errorLabel));\n};\n\nexport default Input;\nInput.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string,\n  placeholder: PropTypes.string,\n  inputClass: PropTypes.string,\n  ariaLabel: PropTypes.string,\n  isRequired: PropTypes.bool\n};","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/components/commons/input.js"],"names":["React","useEffect","useState","PropTypes","inputValidation","inputVal","required","regexString","regex","RegExp","isValid","test","Input","props","type","name","id","value","defaultValue","className","ariaLabel","label","dataName","inputRef","min","maxLength","labelTransform","defaultText","optionalParams","disabled","inputClass","onFocus","onBlur","handleChange","validationResult","error","checked","focussed","setFocussed","inputValue","setInputValue","inputInvalid","setInputInvalid","updateInputValue","newVal","handleFocus","handleBlur","handleInputChange","event","currentTarget","undefined","errorLabel","errorType","console","log","inputId","ariaLabelledBy","showError","transform","__html","propTypes","string","placeholder","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/*\n * Common Input component\n\n * @returns {JSX.Element}\n */\n\nconst inputValidation = (inputVal, required, regexString) => {\n\n    const regex = regexString && new RegExp(regexString, 'i');\n\n    const isValid = regex && inputVal ? regex.test(inputVal) : true;\n\n    return !!required && inputVal === '' ? true : !isValid ? true : false;\n};\n\nconst Input = (props) => {\n\n    const {\n        type = 'text',\n        name,\n        id,\n        value,\n        defaultValue,\n        className = '',\n        ariaLabel,\n        required = false,\n        label,\n        dataName,\n        inputRef,\n        min,\n        maxLength,\n        labelTransform = true,\n        defaultText,\n        regex,\n        optionalParams,\n        disabled = false,\n        inputClass = '',\n        onFocus,\n        onBlur,\n        handleChange,\n        validationResult,\n        error,\n        checked\n    } = props;\n\n    const [ focussed, setFocussed ] = useState(!!value || !!defaultValue);\n    const [ inputValue, setInputValue ] = useState(value || defaultValue || '');\n    const [ inputInvalid, setInputInvalid ] = useState(required && !(value || defaultValue));\n\n    const updateInputValue = (newVal = '') => {\n\n        setInputValue(newVal);\n        setInputInvalid(inputValidation(newVal, required, regex));\n    };\n\n    const handleFocus = () => {\n\n        setFocussed(true);\n\n        typeof onFocus === 'function' && onFocus();\n    };\n\n    const handleBlur = () => {\n\n        setFocussed(false);\n\n        typeof onBlur === 'function' && onBlur();\n    };\n\n    const handleInputChange = (event) => {\n\n        updateInputValue(event.currentTarget && event.currentTarget.value);\n\n        typeof handleChange === 'function' && handleChange(event);\n    };\n\n    useEffect(() => {\n\n        if ( defaultValue === undefined && value !== undefined && value !== inputValue) {\n            updateInputValue(value);\n        }\n    });\n\n    let errorLabel = '';\n\n    if (validationResult && validationResult[name] && error ) {\n\n        const errorType = validationResult[name].error;\n\n        errorLabel = error[errorType] || null;\n    }\n\n    console.log(errorLabel)\n\n    const inputId = id || name,\n        ariaLabelledBy = id && `${id}-label`,\n        // showError = !!errorLabel && inputInvalid,\n        showError = !!errorLabel,\n        transform = inputValue !== '' || focussed;\n\n    return (\n        <div\n            className={`input-holder ${className} ${type} ${disabled ? 'disabled' : ''} ${showError ? 'has-error' : ''}`}\n        >\n            <div className='input-container'>\n                {label && (\n                    <label\n                        htmlFor={inputId}\n                        className={`form-label ${labelTransform && transform ? 'transform' : ''\n                        }`}\n                        id={ariaLabelledBy}>\n                        <span dangerouslySetInnerHTML={{ __html: label }} />\n                    </label>\n                )}\n                <div className='input-field'>\n                    <input\n                        className={`form-control ${ inputClass } ${ value !== '' ? 'has-input' : 'empty' } ${ showError ? 'invalid' : '' }`}\n                        ref={inputRef}\n                        type={type}\n                        id={inputId}\n                        placeholder={defaultText}\n                        maxLength={maxLength}\n                        name={name}\n                        min={min}\n                        data-name={dataName}\n                        value={inputValue}\n                        aria-label={ariaLabel}\n                        {...(label && {\n                            'aria-labelledby': ariaLabelledBy\n                        })}\n                        autoComplete='off'\n                        onFocus={handleFocus}\n                        onBlur={handleBlur}\n                        required={required}\n                        onChange={handleInputChange}\n                        data-regex={regex}\n                        disabled={disabled}\n                        checked={checked}\n                        {...optionalParams}\n                    />\n                </div>\n            </div>\n            {showError &&\n                <div className='error-label'>{errorLabel}</div>\n            }\n        </div>\n    );\n};\n\nexport default Input;\n\nInput.propTypes = {\n    type: PropTypes.string,\n    name: PropTypes.string,\n    placeholder: PropTypes.string,\n    inputClass: PropTypes.string,\n    ariaLabel: PropTypes.string,\n    isRequired: PropTypes.bool\n};"]},"metadata":{},"sourceType":"module"}