{"ast":null,"code":"var _jsxFileName = \"/home/freedom/Music/tcp2.0-frontend/src/screens/Auth/ResetPassword.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap';\nimport { message } from 'shared/constant';\nimport { pushNotification } from 'utils/notification';\nimport { resetPassword } from '../../redux/actions/auth';\nimport Loader from 'shared/Loader';\nimport AuthContainer from '../../components/AuthContainer';\nimport queryString from 'query-string';\n\nclass ResetPassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      password: '',\n      passwordConfirm: '',\n      passwordEye: true,\n      passwordConfirmEye: true,\n      validated: false,\n      passwordMismatch: false,\n      isLoading: false,\n      error: ''\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const {\n        password,\n        passwordConfirm\n      } = this.state;\n\n      if (password !== passwordConfirm) {\n        this.setState({\n          passwordMismatch: true\n        });\n        event.stopPropagation();\n        return;\n      }\n\n      this.setState({\n        validated: true,\n        passwordMismatch: false\n      });\n      const form = event.currentTarget;\n\n      if (form.checkValidity() === false) {\n        event.stopPropagation();\n      } else {\n        this.onConfirm();\n      }\n    };\n\n    this.onConfirm = async () => {\n      const {\n        password\n      } = this.state;\n      const {\n        location\n      } = this.props;\n      const paramsQuery = queryString.parse(location.search);\n      this.setState({\n        isLoading: true\n      });\n      const result = await this.props.resetPassword({\n        password,\n        email: paramsQuery.email,\n        forgot_token: paramsQuery.token\n      });\n\n      if (result.ok) {\n        this.setState({\n          isLoading: false\n        });\n        pushNotification(message.PASSWORD_CHANGE_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n        this.props.history.replace('/');\n      } else {\n        this.setState({\n          isLoading: false\n        });\n        pushNotification(result.error, 'error', 'TOP_RIGHT', 3000);\n        this.setState({\n          error: result.error\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      password,\n      passwordConfirm,\n      passwordEye,\n      passwordConfirmEye,\n      validated,\n      passwordMismatch,\n      error,\n      isLoading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(AuthContainer, {\n      title: \"RESET PASSWORD\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, isLoading && /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      noValidate: true,\n      validated: validated,\n      onSubmit: this.handleSubmit,\n      className: \"wrapper reset-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      className: \"input input-password\",\n      type: passwordEye ? \"password\" : \"text\",\n      value: password,\n      onChange: e => this.setState({\n        password: e.target.value\n      }),\n      isInvalid: this.state.invalidPassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      src: passwordEye ? require('../../assets/images/eye_show.svg') : require('../../assets/images/eye_hide.svg'),\n      alt: \"logo\",\n      onClick: () => this.setState({\n        passwordEye: !this.state.passwordEye\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Form.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, \"Repeat Password\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      className: \"input input-password\",\n      type: passwordConfirmEye ? \"password\" : \"text\",\n      value: passwordConfirm,\n      onChange: e => this.setState({\n        passwordConfirm: e.target.value\n      }),\n      isInvalid: passwordMismatch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      src: passwordConfirmEye ? require('../../assets/images/eye_show.svg') : require('../../assets/images/eye_hide.svg'),\n      alt: \"logo\",\n      onClick: () => this.setState({\n        passwordConfirmEye: !this.state.passwordConfirmEye\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 33\n      }\n    }), passwordMismatch && /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n      type: \"invalid\",\n      style: {\n        marginTop: -15,\n        marginBottom: 15\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 37\n      }\n    }, \"The password and repeat password mismatch\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, error)), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"button-action\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, \"CONFIRM\"))));\n  }\n\n}\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps, {\n  resetPassword\n})(ResetPassword);","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/screens/Auth/ResetPassword.js"],"names":["React","Component","connect","Button","Form","message","pushNotification","resetPassword","Loader","AuthContainer","queryString","ResetPassword","state","password","passwordConfirm","passwordEye","passwordConfirmEye","validated","passwordMismatch","isLoading","error","handleSubmit","event","preventDefault","setState","stopPropagation","form","currentTarget","checkValidity","onConfirm","location","props","paramsQuery","parse","search","result","email","forgot_token","token","ok","PASSWORD_CHANGE_SUCCESS","history","replace","render","e","target","value","invalidPassword","require","marginTop","marginBottom","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form } from 'react-bootstrap';\nimport { message } from 'shared/constant';\nimport { pushNotification } from 'utils/notification';\nimport { resetPassword } from '../../redux/actions/auth';\nimport Loader from 'shared/Loader';\nimport AuthContainer from '../../components/AuthContainer';\nimport queryString from 'query-string';\nclass ResetPassword extends Component {\n    state = {\n        password: '',\n        passwordConfirm: '',\n        \n        passwordEye: true,\n        passwordConfirmEye: true,\n        \n        validated: false,\n        passwordMismatch: false,\n        isLoading: false,\n        error: ''\n    };\n\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        const { password, passwordConfirm } = this.state;\n\n        if (password !== passwordConfirm) {\n            this.setState({ passwordMismatch: true });\n            event.stopPropagation();\n            return;\n        }\n\n        this.setState({ validated: true, passwordMismatch: false });\n\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.stopPropagation();\n        } else {\n            this.onConfirm();\n        }\n    }\n\n    onConfirm = async () => {\n        const { password } = this.state;\n        const { location } = this.props;\n        const paramsQuery = queryString.parse(location.search);\n        this.setState({\n            isLoading: true\n        })\n        const result = await this.props.resetPassword({\n            password,\n            email: paramsQuery.email,\n            forgot_token: paramsQuery.token\n        });\n\n        if (result.ok) {\n            this.setState({\n                isLoading: false\n            })\n            pushNotification(message.PASSWORD_CHANGE_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n            this.props.history.replace('/')\n        } else {\n            this.setState({\n                isLoading: false\n            })\n            pushNotification(result.error, 'error', 'TOP_RIGHT', 3000)\n            this.setState({ error: result.error });\n        }\n    }\n\n    render() {\n        const {\n            password, passwordConfirm,\n            passwordEye, passwordConfirmEye,\n            validated,  passwordMismatch, error, isLoading } = this.state;\n        return (\n            <AuthContainer title=\"RESET PASSWORD\">\n                {\n                    isLoading && <Loader />\n                }\n                <Form noValidate validated={validated} onSubmit={this.handleSubmit} className=\"wrapper reset-page\">\n                    <div className=\"inputs\">                        \n                        <Form.Group>\n                            <Form.Label >Password</Form.Label>\n                            <div className=\"password\">\n                                <Form.Control\n                                    required\n                                    className=\"input input-password\"\n                                    type={passwordEye ? \"password\" : \"text\"}\n                                    value={password}\n                                    onChange={e => this.setState({ password: e.target.value }) }\n                                    isInvalid={this.state.invalidPassword}\n                                />\n                                <img\n                                    src={passwordEye ? require('../../assets/images/eye_show.svg') : require('../../assets/images/eye_hide.svg')}\n                                    alt=\"logo\"\n                                    onClick={() => this.setState({ passwordEye: !this.state.passwordEye })}\n                                />\n                            </div>\n                        </Form.Group>\n\n                        <Form.Group>\n                            <Form.Label >Repeat Password</Form.Label>\n                            <div className=\"password\">\n                                <Form.Control\n                                    required\n                                    className=\"input input-password\"\n                                    type={passwordConfirmEye ? \"password\" : \"text\"}\n                                    value={passwordConfirm}\n                                    onChange={e => this.setState({ passwordConfirm: e.target.value }) }\n                                    isInvalid={passwordMismatch}\n                                />\n\n                                <img\n                                    src={passwordConfirmEye ? require('../../assets/images/eye_show.svg') : require('../../assets/images/eye_hide.svg')}\n                                    alt=\"logo\"\n                                    onClick={() => this.setState({ passwordConfirmEye: !this.state.passwordConfirmEye })}\n                                />\n\n                                { passwordMismatch && (\n                                    <Form.Control.Feedback type=\"invalid\" style={{ marginTop: -15, marginBottom: 15 }}>\n                                        The password and repeat password mismatch\n                                    </Form.Control.Feedback>\n                                ) }\n                            </div>\n                        </Form.Group>\n\n                        <div className=\"error\">\n                            { error }\n                        </div>\n                    </div>\n                    <div>\n                        <Button className=\"button-action\" type=\"submit\">CONFIRM</Button>\n                    </div>\n                </Form>\n            </AuthContainer>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n\n});\n\nexport default connect(\n    mapStateToProps,\n    {\n        resetPassword\n    }\n)(ResetPassword);"]},"metadata":{},"sourceType":"module"}