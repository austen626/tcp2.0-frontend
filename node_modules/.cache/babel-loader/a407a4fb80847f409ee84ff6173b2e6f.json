{"ast":null,"code":"import API from '../../api';\nimport { pushNotification } from 'utils/notification';\nimport { message as notificationMsg } from 'shared/constant';\nexport const GET_PREAPPROVALS = \"GET_PREAPPROVALS\";\nexport const GET_PREAPPROVALS_SUCCESS = \"GET_PREAPPROVALS_SUCCESS\";\nexport const GET_PREAPPROVALS_FAILED = \"GET_PREAPPROVALS_FAILED\";\nexport const SET_SELECTED_PREAPPROVAL = \"SET_SELECTED_PREAPPROVAL\";\nexport const CHANGE_SELECTED_PREAPPROVAL_STATUS = \"CHANGE_SELECTED_PREAPPROVAL_STATUS\";\nexport const SET_SELECTED_PENDING_APPLICATION = \"SET_SELECTED_PENDING_APPLICATION\";\nexport const CHANGE_SELECTED_PENDING_APPLICATION_STATUS = \"CHANGE_SELECTED_PENDING_APPLICATION_STATUS\";\nexport const GET_FUNDING_REQUESTS = \"GET_FUNDING_REQUESTS\";\nexport const GET_FUNDING_REQUESTS_SUCCESS = \"GET_FUNDING_REQUESTS_SUCCESS\";\nexport const GET_FUNDING_REQUESTS_FAILED = \"GET_FUNDING_REQUESTS_FAILED\";\nexport const SET_SELECTED_FUNDING_REQUEST = \"SET_SELECTED_FUNDING_REQUEST\";\nexport const CHANGE_SELECTED_FUNDING_REQUEST_REQUEST = \"CHANGE_SELECTED_FUNDING_REQUEST_REQUEST\";\nexport const CHANGE_SELECTED_FUNDING_REQUEST_STATUS = \"CHANGE_SELECTED_FUNDING_REQUEST_STATUS\";\nexport const CHANGE_SELECTED_FUNDING_REQUEST_FAILED = \"CHANGE_SELECTED_FUNDING_REQUEST_FAILED\";\nexport const CHANGE_SELECTED_PREAPPROVAL_REQUEST = 'CHANGE_SELECTED_PREAPPROVAL_REQUEST';\nexport const CHANGE_SELECTED_PREAPPROVAL_FAILED = 'CHANGE_SELECTED_PREAPPROVAL_FAILED'; // TCP 2.0\n\nexport const GET_DEALER_REQUESTS = \"GET_DEALER_REQUESTS\";\nexport const GET_DEALER_REQUESTS_SUCCESS = \"GET_DEALER_REQUESTS_SUCCESS\";\nexport const GET_DEALER_REQUESTS_FAILED = \"GET_DEALER_REQUESTS_FAILED\";\nexport const SET_SELECTED_DEALER_REQUEST = \"SET_SELECTED_DEALER_REQUEST\";\nexport const UPDATE_SELECTED_DEALER_REQUEST = 'UPDATE_SELECTED_DEALER_REQUEST';\nexport const UPDATE_SELECTED_DEALER_REQUEST_STATUS = \"UPDATE_SELECTED_DEALER_REQUEST_STATUS\";\nexport const UPDATE_SELECTED_DEALER_REQUEST_FAILED = \"UPDATE_SELECTED_DEALER_REQUEST_FAILED\";\nexport function getPreapprovals() {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_PREAPPROVALS\n    });\n\n    try {\n      const response = await API.get(`/sales/preapprovals`);\n      dispatch({\n        type: GET_PREAPPROVALS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PREAPPROVALS_FAILED\n      });\n    }\n  };\n}\nexport function setSelectedPreApproval(item) {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_SELECTED_PREAPPROVAL,\n      payload: item\n    });\n  };\n}\nexport function changeSelectedPreApprovalStatus(id, status, message, history, url, approveItem) {\n  return async function (dispatch) {\n    dispatch({\n      type: CHANGE_SELECTED_PREAPPROVAL_REQUEST\n    });\n\n    try {\n      await API.put(`/sales/preapproval/${id}`, {\n        status,\n        message,\n        appliance: approveItem.appliance,\n        earliest_delivery_date: approveItem.earliest_delivery_date,\n        product_type: approveItem.product_type\n      });\n      dispatch({\n        type: CHANGE_SELECTED_PREAPPROVAL_STATUS,\n        payload: status\n      });\n      pushNotification(notificationMsg.DISPOSITION_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n      history && url && history.push(url);\n    } catch (error) {\n      pushNotification('Some Thing Went Wrong', 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: CHANGE_SELECTED_PREAPPROVAL_FAILED\n      });\n    }\n  };\n}\nexport function setSelectedPendingApplication(item) {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_SELECTED_PENDING_APPLICATION,\n      payload: item\n    });\n  };\n}\nexport function changeSelectedPendingApplicationStatus(id, status, history, path, rating, msg) {\n  return async function (dispatch) {\n    dispatch({\n      type: CHANGE_SELECTED_PREAPPROVAL_REQUEST\n    });\n\n    try {\n      const message = msg || \"\";\n      await API.put(`/sales/appstatuschange`, {\n        id,\n        status,\n        rating,\n        message\n      });\n      dispatch({\n        type: CHANGE_SELECTED_PREAPPROVAL_STATUS,\n        payload: status\n      });\n      pushNotification(notificationMsg.REQUEST_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n      history && history.push(path);\n    } catch (error) {\n      pushNotification('Some Thing Went Wrong', 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: CHANGE_SELECTED_PREAPPROVAL_FAILED\n      });\n    }\n  };\n}\nexport function requestFunding(appId, deliveryDate, modalOpen, mountFunction) {\n  return async function (dispatch) {\n    const response = await API.post(`/sales/fundingrequests`, {\n      app_id: appId,\n      delivery_date: deliveryDate\n    });\n\n    if (response) {\n      modalOpen && modalOpen();\n      mountFunction && mountFunction();\n    }\n\n    return true;\n  };\n}\nexport function requestCancel(appId) {\n  return async function (dispatch) {\n    await API.put(`/sales/cancelapp`, {\n      id: appId\n    });\n    return true;\n  };\n}\nexport function getFundingRequests() {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_FUNDING_REQUESTS\n    });\n\n    try {\n      const response = await API.get(`/sales/fundingrequests`);\n      dispatch({\n        type: GET_FUNDING_REQUESTS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_FUNDING_REQUESTS_FAILED\n      });\n    }\n  };\n}\nexport function setSelectedFundingRequest(item) {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_SELECTED_FUNDING_REQUEST,\n      payload: item\n    });\n  };\n}\nexport function changeSelectedFundingRequestStatus(id, status) {\n  return async function (dispatch) {\n    dispatch({\n      type: CHANGE_SELECTED_FUNDING_REQUEST_REQUEST\n    });\n\n    try {\n      await API.put(`/sales/fundingrequest/${id}`, {\n        status\n      });\n      dispatch({\n        type: CHANGE_SELECTED_FUNDING_REQUEST_STATUS,\n        payload: status\n      });\n    } catch (error) {\n      dispatch({\n        type: CHANGE_SELECTED_FUNDING_REQUEST_FAILED\n      });\n    }\n  };\n} // TCP 2.0\n\nexport function getDealersRequests() {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_DEALER_REQUESTS\n    });\n\n    try {\n      const response = await API.get(`/accounts/list-dealer`);\n      dispatch({\n        type: GET_DEALER_REQUESTS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_DEALER_REQUESTS_FAILED\n      });\n    }\n  };\n}\nexport function setSelectedDealerRequest(item) {\n  return async function (dispatch) {\n    dispatch({\n      type: SET_SELECTED_DEALER_REQUEST,\n      payload: item\n    });\n  };\n}\nexport function updateDealer(data) {\n  return async function (dispatch) {\n    dispatch({\n      type: UPDATE_SELECTED_DEALER_REQUEST\n    });\n\n    try {\n      await API.put(`/accounts/update-dealer`, { ...data\n      });\n      dispatch({\n        type: UPDATE_SELECTED_DEALER_REQUEST_STATUS,\n        payload: status\n      });\n      pushNotification(notificationMsg.REQUEST_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n      history && history.push(path);\n    } catch (error) {\n      pushNotification('Some Thing Went Wrong', 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: UPDATE_SELECTED_DEALER_REQUEST_FAILED\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/redux/actions/admin.js"],"names":["API","pushNotification","message","notificationMsg","GET_PREAPPROVALS","GET_PREAPPROVALS_SUCCESS","GET_PREAPPROVALS_FAILED","SET_SELECTED_PREAPPROVAL","CHANGE_SELECTED_PREAPPROVAL_STATUS","SET_SELECTED_PENDING_APPLICATION","CHANGE_SELECTED_PENDING_APPLICATION_STATUS","GET_FUNDING_REQUESTS","GET_FUNDING_REQUESTS_SUCCESS","GET_FUNDING_REQUESTS_FAILED","SET_SELECTED_FUNDING_REQUEST","CHANGE_SELECTED_FUNDING_REQUEST_REQUEST","CHANGE_SELECTED_FUNDING_REQUEST_STATUS","CHANGE_SELECTED_FUNDING_REQUEST_FAILED","CHANGE_SELECTED_PREAPPROVAL_REQUEST","CHANGE_SELECTED_PREAPPROVAL_FAILED","GET_DEALER_REQUESTS","GET_DEALER_REQUESTS_SUCCESS","GET_DEALER_REQUESTS_FAILED","SET_SELECTED_DEALER_REQUEST","UPDATE_SELECTED_DEALER_REQUEST","UPDATE_SELECTED_DEALER_REQUEST_STATUS","UPDATE_SELECTED_DEALER_REQUEST_FAILED","getPreapprovals","dispatch","type","response","get","payload","data","error","setSelectedPreApproval","item","changeSelectedPreApprovalStatus","id","status","history","url","approveItem","put","appliance","earliest_delivery_date","product_type","DISPOSITION_SUCCESS","push","setSelectedPendingApplication","changeSelectedPendingApplicationStatus","path","rating","msg","REQUEST_SUCCESS","requestFunding","appId","deliveryDate","modalOpen","mountFunction","post","app_id","delivery_date","requestCancel","getFundingRequests","setSelectedFundingRequest","changeSelectedFundingRequestStatus","getDealersRequests","setSelectedDealerRequest","updateDealer"],"mappings":"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","sourcesContent":["import API from '../../api';\nimport { pushNotification } from 'utils/notification';\nimport { message as notificationMsg } from 'shared/constant';\nexport const GET_PREAPPROVALS = \"GET_PREAPPROVALS\";\nexport const GET_PREAPPROVALS_SUCCESS = \"GET_PREAPPROVALS_SUCCESS\";\nexport const GET_PREAPPROVALS_FAILED = \"GET_PREAPPROVALS_FAILED\";\n\nexport const SET_SELECTED_PREAPPROVAL = \"SET_SELECTED_PREAPPROVAL\";\nexport const CHANGE_SELECTED_PREAPPROVAL_STATUS = \"CHANGE_SELECTED_PREAPPROVAL_STATUS\";\n\nexport const SET_SELECTED_PENDING_APPLICATION = \"SET_SELECTED_PENDING_APPLICATION\";\nexport const CHANGE_SELECTED_PENDING_APPLICATION_STATUS = \"CHANGE_SELECTED_PENDING_APPLICATION_STATUS\";\n\nexport const GET_FUNDING_REQUESTS = \"GET_FUNDING_REQUESTS\";\nexport const GET_FUNDING_REQUESTS_SUCCESS = \"GET_FUNDING_REQUESTS_SUCCESS\";\nexport const GET_FUNDING_REQUESTS_FAILED = \"GET_FUNDING_REQUESTS_FAILED\";\nexport const SET_SELECTED_FUNDING_REQUEST = \"SET_SELECTED_FUNDING_REQUEST\";\nexport const CHANGE_SELECTED_FUNDING_REQUEST_REQUEST = \"CHANGE_SELECTED_FUNDING_REQUEST_REQUEST\";\nexport const CHANGE_SELECTED_FUNDING_REQUEST_STATUS = \"CHANGE_SELECTED_FUNDING_REQUEST_STATUS\";\nexport const CHANGE_SELECTED_FUNDING_REQUEST_FAILED = \"CHANGE_SELECTED_FUNDING_REQUEST_FAILED\";\n\nexport const CHANGE_SELECTED_PREAPPROVAL_REQUEST= 'CHANGE_SELECTED_PREAPPROVAL_REQUEST';\nexport const CHANGE_SELECTED_PREAPPROVAL_FAILED = 'CHANGE_SELECTED_PREAPPROVAL_FAILED';\n\n\n\n\n\n\n// TCP 2.0\n\nexport const GET_DEALER_REQUESTS = \"GET_DEALER_REQUESTS\";\nexport const GET_DEALER_REQUESTS_SUCCESS = \"GET_DEALER_REQUESTS_SUCCESS\";\nexport const GET_DEALER_REQUESTS_FAILED = \"GET_DEALER_REQUESTS_FAILED\";\nexport const SET_SELECTED_DEALER_REQUEST = \"SET_SELECTED_DEALER_REQUEST\";\nexport const UPDATE_SELECTED_DEALER_REQUEST= 'UPDATE_SELECTED_DEALER_REQUEST';\nexport const UPDATE_SELECTED_DEALER_REQUEST_STATUS = \"UPDATE_SELECTED_DEALER_REQUEST_STATUS\";\nexport const UPDATE_SELECTED_DEALER_REQUEST_FAILED = \"UPDATE_SELECTED_DEALER_REQUEST_FAILED\";\n\n\n\n\n\n\n\n\nexport function getPreapprovals() {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_PREAPPROVALS\n        });\n        try {\n            const response = await API.get(`/sales/preapprovals`);\n            dispatch({\n                type: GET_PREAPPROVALS_SUCCESS,\n                payload: response.data\n            })\n        } catch (error) {\n            dispatch({\n                type: GET_PREAPPROVALS_FAILED\n            })\n        }\n    }\n}\n\nexport function setSelectedPreApproval(item) {\n    return async function(dispatch) {\n        dispatch({\n            type: SET_SELECTED_PREAPPROVAL,\n            payload: item\n        });\n    }\n}\n\nexport function changeSelectedPreApprovalStatus(id, status, message, history, url, approveItem) {\n    return async function(dispatch) {\n        dispatch({\n            type: CHANGE_SELECTED_PREAPPROVAL_REQUEST,\n        })\n        try {\n            await API.put(`/sales/preapproval/${id}`, { status, message, appliance: approveItem.appliance, earliest_delivery_date: approveItem.earliest_delivery_date, product_type: approveItem.product_type });\n            dispatch({\n                type: CHANGE_SELECTED_PREAPPROVAL_STATUS,\n                payload: status\n            })\n            pushNotification(notificationMsg.DISPOSITION_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n            history && url && history.push(url);\n        } catch (error) {\n            pushNotification('Some Thing Went Wrong', 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: CHANGE_SELECTED_PREAPPROVAL_FAILED,\n            })\n        }\n\n    }\n}\n\nexport function setSelectedPendingApplication(item) {\n    return async function(dispatch) {\n        dispatch({\n            type: SET_SELECTED_PENDING_APPLICATION,\n            payload: item\n        });\n    }\n}\n\nexport function changeSelectedPendingApplicationStatus(id, status, history, path, rating, msg) {\n    return async function(dispatch) {\n        dispatch({\n            type: CHANGE_SELECTED_PREAPPROVAL_REQUEST,\n        })\n        try {\n            const message = msg || \"\";\n            await API.put(`/sales/appstatuschange`, { id, status, rating, message });\n            dispatch({\n                type: CHANGE_SELECTED_PREAPPROVAL_STATUS,\n                payload: status\n            })\n            pushNotification(notificationMsg.REQUEST_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n            history && history.push(path);\n        } catch (error) {\n            pushNotification('Some Thing Went Wrong', 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: CHANGE_SELECTED_PREAPPROVAL_FAILED,\n            })\n        }\n       \n    }\n}\n\nexport function requestFunding(appId, deliveryDate, modalOpen, mountFunction) {\n    return async function(dispatch) {\n        const response = await API.post(`/sales/fundingrequests`, {\n            app_id: appId,\n            delivery_date: deliveryDate\n        });\n        if(response) {\n            modalOpen && modalOpen();\n            mountFunction && mountFunction()\n        }      \n        return true;\n    }\n}\n\nexport function requestCancel(appId) {\n    return async function(dispatch) {\n        await API.put(`/sales/cancelapp`, {\n            id: appId\n        });\n        return true;\n    }\n}\n\nexport function getFundingRequests() {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_FUNDING_REQUESTS\n        });\n        try {\n            const response = await API.get(`/sales/fundingrequests`);\n            dispatch({\n                type: GET_FUNDING_REQUESTS_SUCCESS,\n                payload: response.data\n            })\n        } catch (error) {\n            dispatch({\n                type: GET_FUNDING_REQUESTS_FAILED\n            })\n        }\n    }\n}\n\nexport function setSelectedFundingRequest(item) {\n    return async function(dispatch) {\n        dispatch({\n            type: SET_SELECTED_FUNDING_REQUEST,\n            payload: item\n        });\n    }\n}\n\nexport function changeSelectedFundingRequestStatus(id, status) {\n    return async function(dispatch) {\n        dispatch({\n            type: CHANGE_SELECTED_FUNDING_REQUEST_REQUEST,\n        })\n        try {\n            await API.put(`/sales/fundingrequest/${id}`, { status });\n            dispatch({\n                type: CHANGE_SELECTED_FUNDING_REQUEST_STATUS,\n                payload: status\n            })\n        } catch (error) {\n            dispatch({\n                type: CHANGE_SELECTED_FUNDING_REQUEST_FAILED,\n            })\n        }\n       \n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// TCP 2.0\n\n\nexport function getDealersRequests() {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_DEALER_REQUESTS\n        });\n        try {\n            const response = await API.get(`/accounts/list-dealer`);\n            dispatch({\n                type: GET_DEALER_REQUESTS_SUCCESS,\n                payload: response.data\n            })\n        } catch (error) {\n            dispatch({\n                type: GET_DEALER_REQUESTS_FAILED\n            })\n        }\n    }\n}\n\n\nexport function setSelectedDealerRequest(item) {\n    return async function(dispatch) {\n        dispatch({\n            type: SET_SELECTED_DEALER_REQUEST,\n            payload: item\n        });\n    }\n}\n\n\nexport function updateDealer(data) {\n    return async function(dispatch) {\n        dispatch({\n            type: UPDATE_SELECTED_DEALER_REQUEST,\n        })\n        try {\n            await API.put(`/accounts/update-dealer`, { ...data });\n            dispatch({\n                type: UPDATE_SELECTED_DEALER_REQUEST_STATUS,\n                payload: status\n            })\n            pushNotification(notificationMsg.REQUEST_SUCCESS, 'success', 'TOP_RIGHT', 3000);\n            history && history.push(path);\n        } catch (error) {\n            pushNotification('Some Thing Went Wrong', 'error', 'TOP_RIGHT', 3000);\n            dispatch({\n                type: UPDATE_SELECTED_DEALER_REQUEST_FAILED,\n            })\n        }\n       \n    }\n}"]},"metadata":{},"sourceType":"module"}