{"ast":null,"code":"const getFromData = (container, ignores, integerKeys) => {\n  const serializeIgnores = ignores | [];\n  const form = container.currentTarget;\n  const formElements = form.elements;\n  let validationResult = {};\n  let formData = {};\n\n  for (let i = 0; i < formElements.lenght; i++) {\n    const element = formElements[i];\n    let {\n      name,\n      dataset,\n      value,\n      selectedOption,\n      type\n    } = element;\n    console.log(name);\n    const regexString = dataset.regex;\n    const regex = regexString && new RegExp(regexString, 'i');\n    const isValid = regex && value ? regex.test(value) : true;\n    const elmResult = element.hasAttribute('required') && value === '' ? {\n      error: 'empty'\n    } : !isValid ? {\n      error: 'invalid'\n    } : null;\n\n    if (elmResult) {\n      validationResult[name] = elmResult;\n    }\n\n    if (!serializeIgnores.includes(name) && name !== \"\") {\n      if (integerKeys && integerKeys.includes(name)) {\n        value = parseInt(value);\n      }\n\n      if (type === 'checkbox') {\n        value = value === 'true';\n      }\n\n      formData[name] = value;\n    }\n  }\n\n  return {\n    formData,\n    validationResult: Object.keys(validationResult).length > 0 && validationResult\n  };\n};\n\nexport { getFromData };","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/utils/utility.js"],"names":["getFromData","container","ignores","integerKeys","serializeIgnores","form","currentTarget","formElements","elements","validationResult","formData","i","lenght","element","name","dataset","value","selectedOption","type","console","log","regexString","regex","RegExp","isValid","test","elmResult","hasAttribute","error","includes","parseInt","Object","keys","length"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,WAArB,KAAqC;AAErD,QAAMC,gBAAgB,GAAGF,OAAO,GAAG,EAAnC;AAEA,QAAMG,IAAI,GAAGJ,SAAS,CAACK,aAAvB;AAEA,QAAMC,YAAY,GAAGF,IAAI,CAACG,QAA1B;AAEA,MAAIC,gBAAgB,GAAG,EAAvB;AAEA,MAAIC,QAAQ,GAAG,EAAf;;AAEA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,YAAY,CAACK,MAAhC,EAAwCD,CAAC,EAAzC,EACA;AACI,UAAME,OAAO,GAAGN,YAAY,CAACI,CAAD,CAA5B;AAEA,QAAI;AAAEG,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA,KAAjB;AAAwBC,MAAAA,cAAxB;AAAwCC,MAAAA;AAAxC,QAAiDL,OAArD;AAEAM,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AAEA,UAAMO,WAAW,GAAGN,OAAO,CAACO,KAA5B;AAEA,UAAMA,KAAK,GAAGD,WAAW,IAAI,IAAIE,MAAJ,CAAWF,WAAX,EAAwB,GAAxB,CAA7B;AAEA,UAAMG,OAAO,GAAGF,KAAK,IAAIN,KAAT,GAAiBM,KAAK,CAACG,IAAN,CAAWT,KAAX,CAAjB,GAAoC,IAApD;AAEA,UAAMU,SAAS,GAAGb,OAAO,CAACc,YAAR,CAAqB,UAArB,KAAoCX,KAAK,KAAK,EAA9C,GAAmD;AAAEY,MAAAA,KAAK,EAAE;AAAT,KAAnD,GAAwE,CAACJ,OAAD,GAAW;AAAEI,MAAAA,KAAK,EAAE;AAAT,KAAX,GAAkC,IAA5H;;AAEA,QAAGF,SAAH,EACA;AACIjB,MAAAA,gBAAgB,CAACK,IAAD,CAAhB,GAAyBY,SAAzB;AACH;;AAED,QAAG,CAACtB,gBAAgB,CAACyB,QAAjB,CAA0Bf,IAA1B,CAAD,IAAoCA,IAAI,KAAK,EAAhD,EACA;AACI,UAAGX,WAAW,IAAIA,WAAW,CAAC0B,QAAZ,CAAqBf,IAArB,CAAlB,EACA;AACIE,QAAAA,KAAK,GAAGc,QAAQ,CAACd,KAAD,CAAhB;AACH;;AAED,UAAGE,IAAI,KAAK,UAAZ,EACA;AACIF,QAAAA,KAAK,GAAGA,KAAK,KAAK,MAAlB;AACH;;AAEDN,MAAAA,QAAQ,CAACI,IAAD,CAAR,GAAiBE,KAAjB;AACH;AACJ;;AAED,SAAO;AACHN,IAAAA,QADG;AAEHD,IAAAA,gBAAgB,EAAEsB,MAAM,CAACC,IAAP,CAAYvB,gBAAZ,EAA8BwB,MAA9B,GAAuC,CAAvC,IAA4CxB;AAF3D,GAAP;AAIH,CArDD;;AAwDA,SACIT,WADJ","sourcesContent":["const getFromData = (container, ignores, integerKeys) => {\n\n    const serializeIgnores = ignores | [];\n\n    const form = container.currentTarget;\n\n    const formElements = form.elements;\n\n    let validationResult = {};\n\n    let formData = {};\n\n    for(let i = 0; i < formElements.lenght; i++)\n    {\n        const element = formElements[i];\n\n        let { name, dataset, value, selectedOption, type } = element;\n\n        console.log(name)\n\n        const regexString = dataset.regex;\n\n        const regex = regexString && new RegExp(regexString, 'i');\n\n        const isValid = regex && value ? regex.test(value): true;\n\n        const elmResult = element.hasAttribute('required') && value === '' ? { error: 'empty' } : !isValid ? { error: 'invalid' } : null;\n\n        if(elmResult) \n        {\n            validationResult[name] = elmResult;\n        }\n\n        if(!serializeIgnores.includes(name) && name !== \"\")\n        {\n            if(integerKeys && integerKeys.includes(name))\n            {\n                value = parseInt(value);\n            }\n\n            if(type === 'checkbox') \n            {\n                value = value === 'true';\n            }\n\n            formData[name] = value;\n        }\n    }\n\n    return {\n        formData,\n        validationResult: Object.keys(validationResult).length > 0 && validationResult\n    };    \n};\n\n\nexport {\n    getFromData\n};"]},"metadata":{},"sourceType":"module"}