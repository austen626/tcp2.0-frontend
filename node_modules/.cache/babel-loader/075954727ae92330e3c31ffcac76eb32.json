{"ast":null,"code":"export const setApplianceFlag = type => {\n  let applianceConst = \"\";\n\n  switch (type) {\n    case \"food\":\n      applianceConst = 'Food';\n      break;\n\n    case \"appliance\":\n    case \"fsp\":\n      applianceConst = 'Appliance';\n      break;\n\n    case \"app\":\n      applianceConst = 'Other';\n      break;\n\n    case \"food, appliance\":\n      applianceConst = 'Food & Appliance';\n      break;\n\n    default:\n      applianceConst = 'Food';\n      break;\n  }\n\n  return applianceConst;\n};\nexport const getDonotCheckDetail = () => {\n  const rememberDetails = localStorage.getItem('isDonotAskAgain');\n  return rememberDetails || 'false';\n};\nexport function parseFun(type) {\n  return typeof type == 'string' ? JSON.parse(type) : type;\n}\nexport const capitalize = s => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\nexport const toTitleCase = phrase => {\n  return phrase.toLowerCase().split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\nexport const setLoanProductName = value => {\n  const type = value ? value.substring(0, 4) : 0;\n  let productName = \"\";\n\n  switch (type) {\n    case \"3663\":\n      productName = 'Food';\n      break;\n\n    case \"3733\":\n      productName = 'Appliance';\n      break;\n\n    default:\n      productName = 'Other';\n      break;\n  }\n\n  return productName;\n};","map":{"version":3,"sources":["/home/freedom/Music/tcp-frontend/src/utils/helper.js"],"names":["setApplianceFlag","type","applianceConst","getDonotCheckDetail","rememberDetails","localStorage","getItem","parseFun","JSON","parse","capitalize","s","charAt","toUpperCase","slice","toTitleCase","phrase","toLowerCase","split","map","word","join","setLoanProductName","value","substring","productName"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAIC,IAAD,IAAU;AACtC,MAAIC,cAAc,GAAG,EAArB;;AACA,UAAOD,IAAP;AACI,SAAK,MAAL;AACIC,MAAAA,cAAc,GAAG,MAAjB;AACA;;AACJ,SAAK,WAAL;AACA,SAAK,KAAL;AACIA,MAAAA,cAAc,GAAG,WAAjB;AACA;;AACJ,SAAK,KAAL;AACIA,MAAAA,cAAc,GAAG,OAAjB;AACA;;AACJ,SAAK,iBAAL;AACIA,MAAAA,cAAc,GAAG,kBAAjB;AACA;;AACJ;AACIA,MAAAA,cAAc,GAAG,MAAjB;AACA;AAhBR;;AAkBA,SAAOA,cAAP;AACH,CArBM;AAuBP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACrC,QAAMC,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAxB;AACA,SAAOF,eAAe,IAAI,OAA1B;AACH,CAHM;AAKP,OAAO,SAASG,QAAT,CAAkBN,IAAlB,EAAwB;AAC3B,SAAO,OAAOA,IAAP,IAAe,QAAf,GAA0BO,IAAI,CAACC,KAAL,CAAWR,IAAX,CAA1B,GAA6CA,IAApD;AACF;AAEF,OAAQ,MAAMS,UAAU,GAAIC,CAAD,IAAO;AAC9B,MAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B,OAAO,EAAP;AAC3B,SAAOA,CAAC,CAACC,MAAF,CAAS,CAAT,EAAYC,WAAZ,KAA4BF,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAnC;AACH,CAHO;AAKR,OAAO,MAAMC,WAAW,GAAIC,MAAD,IAAY;AACnC,SAAOA,MAAM,CACVC,WADI,GAEJC,KAFI,CAEE,GAFF,EAGJC,GAHI,CAGAC,IAAI,IAAIA,IAAI,CAACR,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BO,IAAI,CAACN,KAAL,CAAW,CAAX,CAHvC,EAIJO,IAJI,CAIC,GAJD,CAAP;AAKH,CANM;AAQP,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACzC,QAAMtB,IAAI,GAAGsB,KAAK,GAAIA,KAAD,CAAQC,SAAR,CAAkB,CAAlB,EAAqB,CAArB,CAAH,GAA6B,CAA/C;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,UAAOxB,IAAP;AACI,SAAK,MAAL;AACIwB,MAAAA,WAAW,GAAG,MAAd;AACA;;AACJ,SAAK,MAAL;AACIA,MAAAA,WAAW,GAAG,WAAd;AACA;;AACJ;AACIA,MAAAA,WAAW,GAAG,OAAd;AACA;AATR;;AAWA,SAAOA,WAAP;AACH,CAfM","sourcesContent":["export const setApplianceFlag = (type) => {\n    let applianceConst = \"\";\n    switch(type) {\n        case \"food\":\n            applianceConst = 'Food';\n            break;\n        case \"appliance\":\n        case \"fsp\":\n            applianceConst = 'Appliance'\n            break;\n        case \"app\":\n            applianceConst = 'Other'\n            break;\n        case \"food, appliance\":\n            applianceConst = 'Food & Appliance'\n            break;\n        default:\n            applianceConst = 'Food'\n            break;\n    }\n    return applianceConst;\n}\n\nexport const getDonotCheckDetail = () => {\n    const rememberDetails = localStorage.getItem('isDonotAskAgain');\n    return rememberDetails || 'false';\n}\n\nexport function parseFun(type) {\n    return typeof type == 'string' ? JSON.parse(type) : type;\n }\n\nexport  const capitalize = (s) => {\n    if (typeof s !== 'string') return ''\n    return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nexport const toTitleCase = (phrase) => {\n    return phrase\n      .toLowerCase()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n};\n\nexport const setLoanProductName = (value) => {\n    const type = value ? (value).substring(0, 4) : 0;\n    let productName = \"\";\n    switch(type) {\n        case \"3663\":\n            productName = 'Food';\n            break;\n        case \"3733\":\n            productName = 'Appliance'\n            break;\n        default:\n            productName = 'Other'\n            break;\n    }\n    return productName;\n}\n"]},"metadata":{},"sourceType":"module"}