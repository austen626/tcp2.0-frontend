{"ast":null,"code":"import { message } from 'shared/constant';\nexport const commonValidation = (expression, values, errors) => {\n  switch (expression) {\n    case 'email':\n      if (!values.email) {\n        errors.email = message.EMPTY_EMAIL;\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = message.INVALID_EMAIL;\n      }\n\n      break;\n\n    default: // code block\n\n  }\n};\nexport const changePasswordValidation = values => {\n  const errors = {};\n\n  if (!values.currentPassword) {\n    errors.currentPassword = message.EMPTY_PASSWORD;\n  } else if (values.currentPassword && values.currentPassword.length < 8) {\n    errors.currentPassword = message.PASSWORD_LENGTH;\n  }\n\n  if (!values.password) {\n    errors.password = message.EMPTY_PASSWORD;\n  } else if (values.password && values.password.length < 8) {\n    errors.password = message.PASSWORD_LENGTH;\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = message.EMPTY_CONFIRM_PASSWORD;\n  } else if (values.confirmPassword !== values.password) {\n    errors.confirmPassword = message.PASSWORD_NOT_MATCH;\n  }\n\n  return errors;\n};\nexport const userForm = values => {\n  const errors = {};\n\n  if (!values.firstName) {\n    errors.firstName = message.EMPTY_FIRST_NAME;\n  }\n\n  if (!values.lastName) {\n    errors.lastName = message.EMPTY_LAST_NAME;\n  }\n\n  commonValidation('email', values, errors);\n  return errors;\n};\nexport const invitationValidation = values => {\n  const errors = {};\n  commonValidation('email', values, errors);\n  return errors;\n};","map":{"version":3,"sources":["/home/freedom/Music/tcp-frontend/src/utils/validate.js"],"names":["message","commonValidation","expression","values","errors","email","EMPTY_EMAIL","test","INVALID_EMAIL","changePasswordValidation","currentPassword","EMPTY_PASSWORD","length","PASSWORD_LENGTH","password","confirmPassword","EMPTY_CONFIRM_PASSWORD","PASSWORD_NOT_MATCH","userForm","firstName","EMPTY_FIRST_NAME","lastName","EMPTY_LAST_NAME","invitationValidation"],"mappings":"AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,UAAD,EAAaC,MAAb,EAAqBC,MAArB,KAAgC;AAC5D,UAAOF,UAAP;AACA,SAAK,OAAL;AACI,UAAI,CAACC,MAAM,CAACE,KAAZ,EAAmB;AACfD,QAAAA,MAAM,CAACC,KAAP,GAAeL,OAAO,CAACM,WAAvB;AACH,OAFD,MAEO,IAAI,CAAC,4CAA4CC,IAA5C,CAAiDJ,MAAM,CAACE,KAAxD,CAAL,EAAqE;AACxED,QAAAA,MAAM,CAACC,KAAP,GAAeL,OAAO,CAACQ,aAAvB;AACH;;AACD;;AACJ,YARA,CASI;;AATJ;AAWH,CAZM;AAcP,OAAO,MAAMC,wBAAwB,GAAGN,MAAM,IAAI;AAC9C,QAAMC,MAAM,GAAG,EAAf;;AACA,MAAI,CAACD,MAAM,CAACO,eAAZ,EAA6B;AACzBN,IAAAA,MAAM,CAACM,eAAP,GAAyBV,OAAO,CAACW,cAAjC;AACH,GAFD,MAEO,IAAGR,MAAM,CAACO,eAAP,IAA0BP,MAAM,CAACO,eAAP,CAAuBE,MAAvB,GAAgC,CAA7D,EAAgE;AACnER,IAAAA,MAAM,CAACM,eAAP,GAAyBV,OAAO,CAACa,eAAjC;AACH;;AAED,MAAI,CAACV,MAAM,CAACW,QAAZ,EAAsB;AAClBV,IAAAA,MAAM,CAACU,QAAP,GAAkBd,OAAO,CAACW,cAA1B;AACH,GAFD,MAEO,IAAGR,MAAM,CAACW,QAAP,IAAmBX,MAAM,CAACW,QAAP,CAAgBF,MAAhB,GAAyB,CAA/C,EAAkD;AACrDR,IAAAA,MAAM,CAACU,QAAP,GAAkBd,OAAO,CAACa,eAA1B;AACH;;AAED,MAAI,CAACV,MAAM,CAACY,eAAZ,EAA8B;AAC1BX,IAAAA,MAAM,CAACW,eAAP,GAAyBf,OAAO,CAACgB,sBAAjC;AACH,GAFD,MAEO,IAAIb,MAAM,CAACY,eAAP,KAA2BZ,MAAM,CAACW,QAAtC,EAAgD;AACnDV,IAAAA,MAAM,CAACW,eAAP,GAAyBf,OAAO,CAACiB,kBAAjC;AACH;;AACD,SAAOb,MAAP;AACH,CApBM;AAsBP,OAAO,MAAMc,QAAQ,GAAGf,MAAM,IAAI;AAC9B,QAAMC,MAAM,GAAG,EAAf;;AACA,MAAI,CAACD,MAAM,CAACgB,SAAZ,EAAuB;AACnBf,IAAAA,MAAM,CAACe,SAAP,GAAmBnB,OAAO,CAACoB,gBAA3B;AACH;;AACD,MAAI,CAACjB,MAAM,CAACkB,QAAZ,EAAsB;AAClBjB,IAAAA,MAAM,CAACiB,QAAP,GAAkBrB,OAAO,CAACsB,eAA1B;AACH;;AACDrB,EAAAA,gBAAgB,CAAC,OAAD,EAAUE,MAAV,EAAkBC,MAAlB,CAAhB;AACA,SAAOA,MAAP;AACH,CAVM;AAYP,OAAO,MAAMmB,oBAAoB,GAAGpB,MAAM,IAAI;AAC1C,QAAMC,MAAM,GAAG,EAAf;AACAH,EAAAA,gBAAgB,CAAC,OAAD,EAAUE,MAAV,EAAkBC,MAAlB,CAAhB;AACA,SAAOA,MAAP;AACH,CAJM","sourcesContent":["import { message } from 'shared/constant';\n\nexport const commonValidation = (expression, values, errors) => {\n    switch(expression) {\n    case 'email':\n        if (!values.email) {\n            errors.email = message.EMPTY_EMAIL;\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = message.INVALID_EMAIL;\n        }\n        break;\n    default:\n        // code block\n    }\n}\n\nexport const changePasswordValidation = values => {\n    const errors = {};\n    if (!values.currentPassword) {\n        errors.currentPassword = message.EMPTY_PASSWORD;\n    } else if(values.currentPassword && values.currentPassword.length < 8) {\n        errors.currentPassword = message.PASSWORD_LENGTH;\n    }\n\n    if (!values.password) {\n        errors.password = message.EMPTY_PASSWORD;\n    } else if(values.password && values.password.length < 8) {\n        errors.password = message.PASSWORD_LENGTH;\n    }\n\n    if (!values.confirmPassword ) {\n        errors.confirmPassword = message.EMPTY_CONFIRM_PASSWORD ;\n    } else if (values.confirmPassword !== values.password) {\n        errors.confirmPassword = message.PASSWORD_NOT_MATCH ;\n    }\n    return errors;\n}\n\nexport const userForm = values => {\n    const errors = {};\n    if (!values.firstName) {\n        errors.firstName = message.EMPTY_FIRST_NAME;\n    }\n    if (!values.lastName) {\n        errors.lastName = message.EMPTY_LAST_NAME;\n    }\n    commonValidation('email', values, errors);\n    return errors;\n}\n\nexport const invitationValidation = values => {\n    const errors = {};\n    commonValidation('email', values, errors);\n    return errors;\n}\n"]},"metadata":{},"sourceType":"module"}