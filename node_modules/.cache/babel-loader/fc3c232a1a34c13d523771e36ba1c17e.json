{"ast":null,"code":"import API from '../../api';\nimport { GET_CUSTOMER_HISTORY_REQUEST, GET_CUSTOMER_HISTORY_SUCCESS, GET_CUSTOMER_HISTORY_FAILED, GET_CUSTOMER_PAYMENT_HISTORY_REQUEST, GET_CUSTOMER_PAYMENT_HISTORY_SUCCESS, GET_CUSTOMER_PAYMENT_HISTORY_FAILED, AGAIN_PREREQUEST_REQUEST, AGAIN_PREREQUEST_SUCCESS, AGAIN_PREREQUEST_FAILED } from './actionTypes';\nimport { pushNotification } from 'utils/notification';\nexport const SEARCH_CUSTOMERS = \"SEARCH_CUSTOMERS\";\nexport const SEARCH_CUSTOMERS_SUCCESS = \"SEARCH_CUSTOMERS_SUCCESS\";\nexport const SEARCH_CUSTOMERS_FAILED = \"SEARCH_CUSTOMERS_FAILED\";\nexport const GET_PREAPPROVAL_CUSTOMERS = \"GET_PREAPPROVAL_CUSTOMERS\";\nexport const GET_PREAPPROVAL_CUSTOMERS_SUCCESS = \"GET_PREAPPROVAL_CUSTOMERS_SUCCESS\";\nexport const GET_PREAPPROVAL_CUSTOMERS_FAILED = \"GET_PREAPPROVAL_CUSTOMERS_FAILED\";\nexport const GET_CUSTOMER = \"GET_CUSTOMER\";\nexport const GET_CUSTOMER_SUCCESS = \"GET_CUSTOMER_SUCCESS\";\nexport const GET_CUSTOMER_FAILED = \"GET_CUSTOMER_FAILED\";\nexport const GET_PREAPPROVAL_COUNTS_REQUEST = \"GET_PREAPPROVAL_COUNTS_REQUEST\";\nexport const GET_PREAPPROVAL_COUNTS_SUCCESS = \"GET_PREAPPROVAL_COUNTS_SUCCESS\";\nexport const GET_PREAPPROVAL_COUNTS_FAILED = \"GET_PREAPPROVAL_COUNTS_FAILED\";\nexport function searchCustomers(body, type) {\n  return async function (dispatch) {\n    dispatch({\n      type: SEARCH_CUSTOMERS\n    });\n\n    try {\n      // let url = '/sales/search-customer-local';\n      // if(type === \"main\") {\n      //     url = '/sales/search-customer-nortridge';\n      // }\n      const url = '/sales/search-customer-nortridge';\n      const response = await API.post(url, body);\n      dispatch({\n        type: SEARCH_CUSTOMERS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: SEARCH_CUSTOMERS_FAILED\n      });\n    }\n  };\n}\nexport function getPreApprovalCustomers() {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_PREAPPROVAL_CUSTOMERS\n    });\n\n    try {\n      // const response = await API.get('/sales/customers');\n      const response = await API.get('/sales/customersnew');\n      dispatch({\n        type: GET_PREAPPROVAL_CUSTOMERS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PREAPPROVAL_CUSTOMERS_FAILED\n      });\n    }\n  };\n}\nexport function getCustomerById(id, type) {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_CUSTOMER\n    });\n\n    try {\n      const response = await API.get(`/sales/customer/${id}`); // if(type === 'appliance') {\n      //     response.data.preapproval = [response.data.preapproval[1]]\n      // }\n\n      dispatch({\n        type: GET_CUSTOMER_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_CUSTOMER_FAILED\n      });\n    }\n  };\n}\nexport function sendPreapproval(id) {\n  return async function (dispatch) {\n    try {\n      await API.post(`/sales/preapprovals`, {\n        customer_id: id\n      });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n}\nexport function getPreapprovalCount() {\n  return async function (dispatch) {\n    dispatch({\n      type: GET_PREAPPROVAL_COUNTS_REQUEST\n    });\n\n    try {\n      const response = await API.get(`/sales/counts-preapproval`);\n      const count = response.data.counts.preapproval;\n      dispatch({\n        type: GET_PREAPPROVAL_COUNTS_SUCCESS,\n        payload: count\n      });\n    } catch (error) {\n      dispatch({\n        type: GET_PREAPPROVAL_COUNTS_FAILED\n      });\n    }\n  };\n}\nexport function getCustomerHistory(action) {\n  return async function (dispatch) {\n    const {\n      id\n    } = action;\n    dispatch({\n      type: GET_CUSTOMER_HISTORY_REQUEST,\n      data: []\n    });\n\n    try {\n      const response = await API.get(`/sales/nortridge-loandetail/${id}`);\n\n      if (response) {\n        dispatch({\n          type: GET_CUSTOMER_HISTORY_SUCCESS,\n          data: response.data\n        });\n      }\n    } catch (error) {\n      pushNotification(error.response, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: GET_CUSTOMER_HISTORY_FAILED\n      });\n    }\n  };\n}\nexport function getCustomerPaymentHistory(action) {\n  return async function (dispatch) {\n    const {\n      id\n    } = action;\n    dispatch({\n      type: GET_CUSTOMER_PAYMENT_HISTORY_REQUEST,\n      data: []\n    });\n\n    try {\n      const response = await API.get(`/sales/nortridge-loanpayment/${id}`);\n\n      if (response) {\n        dispatch({\n          type: GET_CUSTOMER_PAYMENT_HISTORY_SUCCESS,\n          data: response.data\n        });\n      }\n    } catch (error) {\n      pushNotification(error.response, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: GET_CUSTOMER_PAYMENT_HISTORY_FAILED\n      });\n    }\n  };\n}\nexport function reRequestPreApproval(id, modalShow) {\n  return async function (dispatch) {\n    dispatch({\n      type: AGAIN_PREREQUEST_REQUEST,\n      data: []\n    });\n\n    try {\n      const response = await API.put(`/sales/preapprovalrequest/` + id);\n\n      if (response) {\n        dispatch({\n          type: AGAIN_PREREQUEST_SUCCESS,\n          data: response.data\n        });\n        modalShow && modalShow();\n      }\n    } catch (error) {\n      pushNotification(error.response, 'error', 'TOP_RIGHT', 3000);\n      dispatch({\n        type: AGAIN_PREREQUEST_FAILED\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/home/freedom/Music/tcp2.0-frontend/src/redux/actions/customers.js"],"names":["API","GET_CUSTOMER_HISTORY_REQUEST","GET_CUSTOMER_HISTORY_SUCCESS","GET_CUSTOMER_HISTORY_FAILED","GET_CUSTOMER_PAYMENT_HISTORY_REQUEST","GET_CUSTOMER_PAYMENT_HISTORY_SUCCESS","GET_CUSTOMER_PAYMENT_HISTORY_FAILED","AGAIN_PREREQUEST_REQUEST","AGAIN_PREREQUEST_SUCCESS","AGAIN_PREREQUEST_FAILED","pushNotification","SEARCH_CUSTOMERS","SEARCH_CUSTOMERS_SUCCESS","SEARCH_CUSTOMERS_FAILED","GET_PREAPPROVAL_CUSTOMERS","GET_PREAPPROVAL_CUSTOMERS_SUCCESS","GET_PREAPPROVAL_CUSTOMERS_FAILED","GET_CUSTOMER","GET_CUSTOMER_SUCCESS","GET_CUSTOMER_FAILED","GET_PREAPPROVAL_COUNTS_REQUEST","GET_PREAPPROVAL_COUNTS_SUCCESS","GET_PREAPPROVAL_COUNTS_FAILED","searchCustomers","body","type","dispatch","url","response","post","payload","data","error","getPreApprovalCustomers","get","getCustomerById","id","sendPreapproval","customer_id","getPreapprovalCount","count","counts","preapproval","getCustomerHistory","action","getCustomerPaymentHistory","reRequestPreApproval","modalShow","put"],"mappings":"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","sourcesContent":["import API from '../../api';\nimport { \n    GET_CUSTOMER_HISTORY_REQUEST,\n    GET_CUSTOMER_HISTORY_SUCCESS,\n    GET_CUSTOMER_HISTORY_FAILED,\n\n    GET_CUSTOMER_PAYMENT_HISTORY_REQUEST,\n    GET_CUSTOMER_PAYMENT_HISTORY_SUCCESS,\n    GET_CUSTOMER_PAYMENT_HISTORY_FAILED,   \n\n    AGAIN_PREREQUEST_REQUEST,\n    AGAIN_PREREQUEST_SUCCESS,\n    AGAIN_PREREQUEST_FAILED\n} from './actionTypes';\nimport { pushNotification } from 'utils/notification';\nexport const SEARCH_CUSTOMERS = \"SEARCH_CUSTOMERS\";\nexport const SEARCH_CUSTOMERS_SUCCESS = \"SEARCH_CUSTOMERS_SUCCESS\";\nexport const SEARCH_CUSTOMERS_FAILED = \"SEARCH_CUSTOMERS_FAILED\";\n\nexport const GET_PREAPPROVAL_CUSTOMERS = \"GET_PREAPPROVAL_CUSTOMERS\";\nexport const GET_PREAPPROVAL_CUSTOMERS_SUCCESS = \"GET_PREAPPROVAL_CUSTOMERS_SUCCESS\";\nexport const GET_PREAPPROVAL_CUSTOMERS_FAILED = \"GET_PREAPPROVAL_CUSTOMERS_FAILED\";\n\nexport const GET_CUSTOMER = \"GET_CUSTOMER\";\nexport const GET_CUSTOMER_SUCCESS = \"GET_CUSTOMER_SUCCESS\";\nexport const GET_CUSTOMER_FAILED = \"GET_CUSTOMER_FAILED\";\n\nexport const GET_PREAPPROVAL_COUNTS_REQUEST = \"GET_PREAPPROVAL_COUNTS_REQUEST\";\nexport const GET_PREAPPROVAL_COUNTS_SUCCESS = \"GET_PREAPPROVAL_COUNTS_SUCCESS\";\nexport const GET_PREAPPROVAL_COUNTS_FAILED = \"GET_PREAPPROVAL_COUNTS_FAILED\";\n\n\nexport function searchCustomers(body, type) {\n    return async function(dispatch) {\n        dispatch({\n            type: SEARCH_CUSTOMERS\n        });\n        try {\n            // let url = '/sales/search-customer-local';\n            // if(type === \"main\") {\n            //     url = '/sales/search-customer-nortridge';\n            // }\n            const url = '/sales/search-customer-nortridge';\n            const response = await API.post(url, body);\n            dispatch({\n                type: SEARCH_CUSTOMERS_SUCCESS,\n                payload: response.data\n            })\n        } catch (error) {\n            dispatch({\n                type: SEARCH_CUSTOMERS_FAILED\n            })\n        }\n    }\n}\n\nexport function getPreApprovalCustomers() {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_PREAPPROVAL_CUSTOMERS\n        });\n        try {\n            // const response = await API.get('/sales/customers');\n            const response = await API.get('/sales/customersnew');\n            dispatch({\n                type: GET_PREAPPROVAL_CUSTOMERS_SUCCESS,\n                payload: response.data\n            })\n        } catch (error) {\n            dispatch({\n                type: GET_PREAPPROVAL_CUSTOMERS_FAILED\n            })\n        }\n    }\n}\n\nexport function getCustomerById(id, type) {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_CUSTOMER\n        });\n        try {\n            const response = await API.get(`/sales/customer/${id}`)\n            // if(type === 'appliance') {\n            //     response.data.preapproval = [response.data.preapproval[1]]\n            // }\n            dispatch({\n                type: GET_CUSTOMER_SUCCESS,\n                payload: response.data\n            }); \n        } catch (error) {\n            dispatch({\n                type: GET_CUSTOMER_FAILED\n            })\n        }\n    }\n}\n\nexport function sendPreapproval(id) {\n    return async function(dispatch) {\n        try {\n            await API.post(`/sales/preapprovals`, {\n                customer_id: id\n            });\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n}\n\nexport function getPreapprovalCount() {\n    return async function(dispatch) {\n        dispatch({\n            type: GET_PREAPPROVAL_COUNTS_REQUEST\n        });\n        try {\n            const response = await API.get(`/sales/counts-preapproval`)\n            const count = response.data.counts.preapproval;\n            dispatch({\n                type: GET_PREAPPROVAL_COUNTS_SUCCESS,\n                payload: count\n            }); \n        } catch (error) {\n            dispatch({\n                type: GET_PREAPPROVAL_COUNTS_FAILED\n            })\n        }\n    }\n}\n\n\nexport function getCustomerHistory(action) {\n    return async function(dispatch) {\n       const { id } = action;\n        dispatch({\n            type: GET_CUSTOMER_HISTORY_REQUEST,\n            data: []\n        });\n        try {\n            const response = await API.get(`/sales/nortridge-loandetail/${id}`)\n            if(response) {\n                dispatch({\n                    type: GET_CUSTOMER_HISTORY_SUCCESS,\n                    data: response.data\n                });\n            }\n        } catch(error) {\n            pushNotification(error.response, 'error', 'TOP_RIGHT', 3000);            \n            dispatch({\n                type: GET_CUSTOMER_HISTORY_FAILED\n            });\n        }\n       \n    }\n}\n\nexport function getCustomerPaymentHistory(action) {\n    return async function(dispatch) {\n       const { id } = action;\n        dispatch({\n            type: GET_CUSTOMER_PAYMENT_HISTORY_REQUEST,\n            data: []\n        });\n        try {\n            const response = await API.get(`/sales/nortridge-loanpayment/${id}`)\n            if(response) {\n                dispatch({\n                    type: GET_CUSTOMER_PAYMENT_HISTORY_SUCCESS,\n                    data: response.data\n                });\n            }\n        } catch(error) {\n            pushNotification(error.response, 'error', 'TOP_RIGHT', 3000);            \n            dispatch({\n                type: GET_CUSTOMER_PAYMENT_HISTORY_FAILED\n            });\n        }\n       \n    }\n}\n\nexport function reRequestPreApproval(id, modalShow) {\n    return async function(dispatch) {\n         dispatch({\n             type: AGAIN_PREREQUEST_REQUEST,\n             data: []\n         });\n         try {\n            const response = await API.put(`/sales/preapprovalrequest/`+id)\n            if(response) {\n                 dispatch({\n                     type: AGAIN_PREREQUEST_SUCCESS,\n                     data: response.data\n                 });\n                 modalShow && modalShow();\n            }\n         } catch(error) {\n             pushNotification(error.response, 'error', 'TOP_RIGHT', 3000);            \n             dispatch({\n                 type: AGAIN_PREREQUEST_FAILED\n             });\n         }\n        \n     }\n}"]},"metadata":{},"sourceType":"module"}